"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/[...nextapi]";
exports.ids = ["pages/api/[...nextapi]"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "mysql2/promise":
/*!*********************************!*\
  !*** external "mysql2/promise" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("mysql2/promise");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2F%5B...nextapi%5D&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5C%5B...nextapi%5D.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2F%5B...nextapi%5D&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5C%5B...nextapi%5D.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_nextapi_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\[...nextapi].js */ \"(api)/./src/pages/api/[...nextapi].js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_nextapi_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_nextapi_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/[...nextapi]\",\n        pathname: \"/api/[...nextapi]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_nextapi_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRiU1Qi4uLm5leHRhcGklNUQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlNUNwYWdlcyU1Q2FwaSU1QyU1Qi4uLm5leHRhcGklNUQuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDK0Q7QUFDL0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHNEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxzREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZG1pbnBhbmVsLz85NTJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9zcmNcXFxccGFnZXNcXFxcYXBpXFxcXFsuLi5uZXh0YXBpXS5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL1suLi5uZXh0YXBpXVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL1suLi5uZXh0YXBpXVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2F%5B...nextapi%5D&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5C%5B...nextapi%5D.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/pages/api/[...nextapi].js":
/*!***************************************!*\
  !*** ./src/pages/api/[...nextapi].js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler),\n/* harmony export */   handleUpdateAdminData: () => (/* binding */ handleUpdateAdminData)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"mysql2/promise\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mysql2_promise__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/db */ \"(api)/./src/utils/db.js\");\n\n\n\n\nconst db = mysql2_promise__WEBPACK_IMPORTED_MODULE_0___default().createPool({\n    host: process.env.MYSQL_HOST,\n    port: process.env.MYSQL_PORT,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    database: process.env.MYSQL_DATABASE,\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0\n});\nasync function handler(req, res) {\n    const { method } = req;\n    const { pathname, query } = (0,url__WEBPACK_IMPORTED_MODULE_1__.parse)(req.url, true);\n    console.log(\"Received request:\", method, pathname, query);\n    if (pathname === \"/api/test\") {\n        res.status(200).json({\n            message: \"Test route working\"\n        });\n        return;\n    }\n    if (pathname === \"/api/admin-name\") {\n        try {\n            const [results] = await db.query(\"SELECT full_name FROM admin LIMIT 1\");\n            if (results.length > 0) {\n                res.status(200).json({\n                    fullName: results[0].full_name\n                });\n            } else {\n                res.status(404).json({\n                    error: \"Admin not found\"\n                });\n            }\n        } catch (error) {\n            console.error(\"Error fetching admin name:\", error);\n            res.status(500).json({\n                error: \"An error occurred while fetching admin name\"\n            });\n        }\n        return;\n    }\n    try {\n        switch(method){\n            case \"GET\":\n                if (pathname === \"/api/check-auth\") {\n                    const authHeader = req.headers.authorization;\n                    if (!authHeader) {\n                        return res.status(200).json({\n                            isAuthenticated: false,\n                            usernamePasswordVerified: false\n                        });\n                    }\n                    const token = authHeader.split(\" \")[1];\n                    try {\n                        const decoded = (0,jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.verify)(token, process.env.JWT_SECRET);\n                        const now = Math.floor(Date.now() / 1000);\n                        if (decoded.exp && decoded.exp > now) {\n                            // Token is still valid\n                            return res.status(200).json({\n                                isAuthenticated: true,\n                                usernamePasswordVerified: true,\n                                expiresIn: decoded.exp - now\n                            });\n                        } else {\n                            // Token has expired\n                            return res.status(200).json({\n                                isAuthenticated: false,\n                                usernamePasswordVerified: false\n                            });\n                        }\n                    } catch (error) {\n                        return res.status(200).json({\n                            isAuthenticated: false,\n                            usernamePasswordVerified: false\n                        });\n                    }\n                } else if (pathname === \"/api/products\") {\n                    await handleGetProducts(req, res);\n                } else if (pathname === \"/api/stocks\") {\n                    await handleGetStocks(req, res);\n                } else if (pathname === \"/api/total-stock\") {\n                    await handleGetTotalStock(req, res);\n                } else if (pathname === \"/api/sales-report\") {\n                    await handleGetSalesReport(req, res);\n                } else if (pathname === \"/api/sales-data\") {\n                    await handleGetSalesData(req, res);\n                } else if (pathname === \"/api/total-products\") {\n                    await handleGetTotalProducts(req, res);\n                } else if (pathname === \"/api/top-products\") {\n                    await handleGetTopProducts(req, res);\n                } else if (pathname === \"/api/rated-products-count\") {\n                    await handleGetRatedProductsCount(req, res);\n                } else if (pathname === \"/api/logout\") {\n                    await handleLogout(req, res);\n                    return;\n                } else if (pathname === \"/api/orders\") {\n                    await handleGetOrders(req, res);\n                } else if (pathname === \"/api/admin-data\") {\n                    await handleGetAdminData(req, res);\n                } else if (pathname === \"/api/session-history\") {\n                    await handleGetSessionHistory(req, res);\n                } else if (pathname === \"/api/product-analytics\") {\n                    await handleGetProductAnalytics(req, res);\n                } else if (pathname === \"/api/product-performance\") {\n                    await handleGetProductPerformance(req, res);\n                } else if (pathname === \"/api/daily-sales\") {\n                    await handleGetDailySales(req, res);\n                } else if (pathname === \"/api/weekly-sales\") {\n                    await handleGetWeeklySales(req, res);\n                } else if (pathname === \"/api/monthly-sales\") {\n                    await handleGetMonthlySales(req, res);\n                } else if (pathname === \"/api/yearly-sales\") {\n                    await handleGetYearlySales(req, res);\n                } else if (pathname === \"/api/order-details\") {\n                    await handleGetOrderDetails(req, res);\n                }\n                break;\n            case \"POST\":\n                if (pathname === \"/api/signin\") {\n                    await handleSignIn(req, res);\n                } else if (pathname === \"/api/validate-pin\") {\n                    await handleValidatePin(req, res);\n                } else if (pathname === \"/api/products\") {\n                    await handleAddProduct(req, res);\n                } else if (pathname === \"/api/stocks\") {\n                    await handleAddStock(req, res);\n                }\n                break;\n            case \"PUT\":\n                if (pathname.startsWith(\"/api/products/\")) {\n                    const id = pathname.split(\"/\").pop();\n                    await handleUpdateProduct(req, res, id);\n                } else if (pathname.startsWith(\"/api/stocks/\")) {\n                    const id = pathname.split(\"/\").pop();\n                    await handleUpdateStock(req, res, id);\n                } else if (pathname.startsWith(\"/api/orders/\")) {\n                    const parts = pathname.split(\"/\");\n                    const id = parts[3]; // This is the order ID\n                    if (parts[4] === \"status\") {\n                        await handleUpdateOrderStatus(req, res, id);\n                    } else if (parts[4] === \"cancel\") {\n                        await handleCancelOrder(req, res, id);\n                    } else {\n                        await handleUpdateOrder(req, res, id);\n                    }\n                }\n                if (pathname === \"/api/update-admin\") {\n                    await handleUpdateAdminData(req, res);\n                }\n                break;\n            case \"DELETE\":\n                if (pathname.startsWith(\"/api/products/\")) {\n                    const id = pathname.split(\"/\").pop();\n                    await handleDeleteProduct(req, res, id);\n                } else if (pathname.startsWith(\"/api/stocks/\")) {\n                    const id = pathname.split(\"/\").pop();\n                    await handleDeleteStock(req, res, id);\n                } else if (pathname.startsWith(\"/api/orders/\") && pathname.endsWith(\"/salesreport\")) {\n                    await handleRemoveOrderFromSalesReport(req, res);\n                } else {\n                    res.status(404).json({\n                        error: \"Route not found\"\n                    });\n                }\n                break;\n            default:\n                res.setHeader(\"Allow\", [\n                    \"GET\",\n                    \"POST\",\n                    \"PUT\",\n                    \"DELETE\"\n                ]);\n                res.status(405).end(`Method ${method} Not Allowed`);\n        }\n        res.status(404).json({\n            error: \"Route not found\"\n        });\n    } catch (error) {\n        console.error(\"Error in API route:\", error);\n        res.status(500).json({\n            error: \"An error occurred while processing your request\"\n        });\n    }\n}\n//Sales Report \nasync function handleGetOrderDetails(req, res) {\n    const { date } = req.query;\n    let dateCondition;\n    if (!date) {\n        dateCondition = \"DATE(o.order_date) = CURDATE()\";\n    } else {\n        const queryDate = new Date(date);\n        dateCondition = `DATE(o.order_date) = DATE('${queryDate.toISOString().split(\"T\")[0]}')`;\n    }\n    try {\n        const [results] = await db.query(`\r\n      SELECT \r\n        o.order_date,\r\n        o.full_name,\r\n        op.name as product_name,\r\n        op.quantity,\r\n        o.total,\r\n        p.image_url\r\n      FROM orders o\r\n      JOIN ordered_products op ON o.id = op.order_id\r\n      JOIN products p ON op.product_id = p.id\r\n      WHERE \r\n        ${dateCondition}\r\n        AND o.status = 'Delivered'\r\n        AND o.in_sales_report = 1\r\n      ORDER BY o.order_date DESC\r\n    `);\n        res.status(200).json(results);\n    } catch (error) {\n        console.error(\"Error fetching order details:\", error);\n        res.status(500).json({\n            error: \"Error fetching order details\"\n        });\n    }\n}\nasync function handleGetMonthlySales(req, res) {\n    const { year } = req.query;\n    const currentYear = year || new Date().getFullYear();\n    try {\n        const [results] = await db.query(`\r\n      SELECT \r\n        MONTH(order_date) as month,\r\n        SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN 1 ELSE 0 END) as orderCount,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as total,\r\n        SUM(CASE WHEN status = 'Cancelled' THEN 1 ELSE 0 END) as cancelledCount,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Cancelled' THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as cancelledTotal\r\n      FROM orders\r\n      WHERE YEAR(order_date) = ?\r\n      GROUP BY MONTH(order_date)\r\n      ORDER BY month\r\n    `, [\n            currentYear\n        ]);\n        const formattedResults = results.map((row)=>({\n                month: row.month,\n                orderCount: Number(row.orderCount),\n                total: Number(row.total),\n                cancelledCount: Number(row.cancelledCount),\n                cancelledTotal: Number(row.cancelledTotal)\n            }));\n        res.status(200).json(formattedResults);\n    } catch (error) {\n        console.error(\"Error fetching monthly sales:\", error);\n        res.status(500).json({\n            error: \"Error fetching monthly sales data\"\n        });\n    }\n}\nasync function handleGetDailySales(req, res) {\n    try {\n        const [results] = await db.query(`\r\n      SELECT \r\n        DAYOFWEEK(order_date) as period,\r\n        SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN 1 ELSE 0 END) as orders,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as total,\r\n        SUM(CASE WHEN status = 'Cancelled' THEN 1 ELSE 0 END) as cancelledOrders,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Cancelled' THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as cancelledTotal\r\n      FROM orders\r\n      WHERE YEARWEEK(order_date) = YEARWEEK(CURDATE())\r\n      GROUP BY DAYOFWEEK(order_date)\r\n      ORDER BY period\r\n    `);\n        const daysOfWeek = [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ];\n        const fullWeekData = Array.from({\n            length: 7\n        }, (_, i)=>({\n                period: daysOfWeek[i],\n                orders: 0,\n                total: 0,\n                cancelledOrders: 0,\n                cancelledTotal: 0\n            }));\n        results.forEach((row)=>{\n            const dayIndex = row.period - 1;\n            fullWeekData[dayIndex] = {\n                period: daysOfWeek[dayIndex],\n                orders: Number(row.orders),\n                total: Number(row.total),\n                cancelledOrders: Number(row.cancelledOrders),\n                cancelledTotal: Number(row.cancelledTotal)\n            };\n        });\n        res.status(200).json(fullWeekData);\n    } catch (error) {\n        console.error(\"Error fetching daily sales:\", error);\n        res.status(500).json({\n            error: \"Error fetching daily sales data\"\n        });\n    }\n}\nasync function handleGetWeeklySales(req, res) {\n    try {\n        const [results] = await db.query(`\r\n      SELECT \r\n        WEEK(order_date) as weekNumber,\r\n        MIN(DATE(order_date)) as weekStart,\r\n        MAX(DATE(order_date)) as weekEnd,\r\n        SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN 1 ELSE 0 END) as orders,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as total,\r\n        SUM(CASE WHEN status = 'Cancelled' THEN 1 ELSE 0 END) as cancelledOrders,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Cancelled' THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as cancelledTotal\r\n      FROM orders\r\n      WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 7 WEEK)\r\n      GROUP BY WEEK(order_date)\r\n      ORDER BY weekNumber\r\n    `);\n        const formattedResults = results.map((row)=>({\n                period: `Week ${row.weekNumber} (${new Date(row.weekStart).toLocaleDateString()} - ${new Date(row.weekEnd).toLocaleDateString()})`,\n                orders: Number(row.orders),\n                total: Number(row.total),\n                cancelledOrders: Number(row.cancelledOrders),\n                cancelledTotal: Number(row.cancelledTotal)\n            }));\n        res.status(200).json(formattedResults);\n    } catch (error) {\n        console.error(\"Error fetching weekly sales:\", error);\n        res.status(500).json({\n            error: \"Error fetching weekly sales data\"\n        });\n    }\n}\nasync function handleGetYearlySales(req, res) {\n    try {\n        const currentYear = new Date().getFullYear();\n        const [results] = await db.query(`\r\n      SELECT \r\n        YEAR(order_date) as period,\r\n        SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN 1 ELSE 0 END) as orders,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Delivered' AND in_sales_report = 1 THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as total,\r\n        SUM(CASE WHEN status = 'Cancelled' THEN 1 ELSE 0 END) as cancelledOrders,\r\n        CAST(COALESCE(SUM(CASE WHEN status = 'Cancelled' THEN total ELSE 0 END), 0) AS DECIMAL(10,2)) as cancelledTotal\r\n      FROM orders\r\n      WHERE YEAR(order_date) >= ?\r\n      GROUP BY YEAR(order_date)\r\n      ORDER BY period\r\n    `, [\n            currentYear - 4\n        ]);\n        const yearlyData = Array.from({\n            length: 5\n        }, (_, index)=>{\n            const year = currentYear - 4 + index;\n            return {\n                period: year.toString(),\n                orders: 0,\n                total: 0,\n                cancelledOrders: 0,\n                cancelledTotal: 0\n            };\n        });\n        results.forEach((row)=>{\n            const yearIndex = row.period - (currentYear - 4);\n            if (yearIndex >= 0 && yearIndex < 5) {\n                yearlyData[yearIndex] = {\n                    period: row.period.toString(),\n                    orders: Number(row.orders),\n                    total: Number(row.total),\n                    cancelledOrders: Number(row.cancelledOrders),\n                    cancelledTotal: Number(row.cancelledTotal)\n                };\n            }\n        });\n        res.status(200).json(yearlyData);\n    } catch (error) {\n        console.error(\"Error fetching yearly sales:\", error);\n        res.status(500).json({\n            error: \"Error fetching yearly sales data\"\n        });\n    }\n}\nasync function handleGetSalesData(req, res) {\n    const { date } = req.query;\n    let dateCondition;\n    if (!date) {\n        dateCondition = \"DATE(order_date) = CURDATE()\";\n    } else {\n        const queryDate = new Date(date);\n        dateCondition = `DATE(order_date) = DATE('${queryDate.toISOString().split(\"T\")[0]}')`;\n    }\n    try {\n        const [salesResult] = await db.query(`\r\n      SELECT COALESCE(SUM(total), 0) as periodSales\r\n      FROM orders\r\n      WHERE ${dateCondition} AND status = 'Delivered'\r\n    `);\n        const [ordersResult] = await db.query(`\r\n      SELECT COUNT(*) as totalOrders\r\n      FROM orders\r\n      WHERE ${dateCondition}\r\n    `);\n        const [customersResult] = await db.query(`\r\n      SELECT COUNT(DISTINCT user_id) as totalCustomers\r\n      FROM orders\r\n      WHERE ${dateCondition}\r\n    `);\n        const result = {\n            periodSales: Number(salesResult[0].periodSales),\n            totalOrders: ordersResult[0].totalOrders,\n            totalCustomers: customersResult[0].totalCustomers\n        };\n        res.status(200).json(result);\n    } catch (error) {\n        console.error(\"Error fetching sales data:\", error);\n        res.status(500).json({\n            error: \"Error fetching sales data\"\n        });\n    }\n}\n//Data Analytics for Products\nasync function handleGetTopProducts(req, res) {\n    const [result] = await db.query(`\r\n    SELECT \r\n      p.id,\r\n      p.name,\r\n      p.image_url,\r\n      COALESCE(AVG(pr.rating), 0) as avg_rating,\r\n      COALESCE(SUM(op.quantity), 0) as sold\r\n    FROM products p\r\n    LEFT JOIN ordered_products op ON p.id = op.product_id\r\n    LEFT JOIN product_ratings pr ON p.id = pr.product_id\r\n    GROUP BY p.id\r\n    ORDER BY sold DESC, avg_rating DESC\r\n    LIMIT 5\r\n  `);\n    const formattedResult = result.map((product)=>({\n            ...product,\n            avg_rating: Number(product.avg_rating).toFixed(1)\n        }));\n    res.status(200).json(formattedResult);\n}\nasync function handleGetRatedProductsCount(req, res) {\n    const { timeFrame } = req.query;\n    let dateCondition;\n    switch(timeFrame){\n        case \"today\":\n            dateCondition = \"DATE(created_at) = CURDATE()\";\n            break;\n        case \"yesterday\":\n            dateCondition = \"DATE(created_at) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)\";\n            break;\n        case \"lastWeek\":\n            dateCondition = \"DATE(created_at) BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 WEEK) AND CURDATE()\";\n            break;\n        case \"lastMonth\":\n            dateCondition = \"DATE(created_at) BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()\";\n            break;\n        default:\n            dateCondition = \"DATE(created_at) = CURDATE()\";\n    }\n    const [result] = await db.query(`\r\n    SELECT COUNT(DISTINCT product_id) as ratedProductsCount\r\n    FROM product_ratings\r\n    WHERE ${dateCondition}\r\n  `);\n    res.status(200).json(result[0]);\n}\nasync function handleGetTotalProducts(req, res) {\n    const [result] = await db.query(\"SELECT COUNT(*) as totalProducts FROM products\");\n    res.status(200).json(result[0]);\n}\nasync function handleGetProductAnalytics(req, res) {\n    try {\n        const [products] = await db.query(`\r\n      SELECT \r\n        p.*,\r\n        COALESCE(ps.quantity, 0) as current_stock,\r\n        COALESCE(AVG(pr.rating), 0) as avg_rating,\r\n        COUNT(DISTINCT o.id) as order_count\r\n      FROM products p\r\n      LEFT JOIN product_stocks ps ON p.id = ps.product_id\r\n      LEFT JOIN product_ratings pr ON p.id = pr.product_id\r\n      LEFT JOIN ordered_products op ON p.id = op.product_id\r\n      LEFT JOIN orders o ON op.order_id = o.id\r\n      WHERE p.deleted = FALSE\r\n      GROUP BY p.id\r\n    `);\n        const analyzedProducts = products.map((product)=>({\n                ...product,\n                isSaleable: product.order_count > 0 && product.avg_rating >= 3.5 && product.current_stock > 0\n            }));\n        const saleableProducts = analyzedProducts.filter((p)=>p.isSaleable);\n        const nonSaleableProducts = analyzedProducts.filter((p)=>!p.isSaleable);\n        res.status(200).json({\n            saleableProducts,\n            nonSaleableProducts,\n            totalProducts: products.length,\n            saleableCount: saleableProducts.length,\n            nonSaleableCount: nonSaleableProducts.length\n        });\n    } catch (error) {\n        console.error(\"Error fetching product analytics:\", error);\n        res.status(500).json({\n            error: \"Error fetching product analytics\"\n        });\n    }\n}\nasync function handleGetProductPerformance(req, res) {\n    try {\n        const [performanceData] = await db.query(`\r\n      SELECT \r\n        p.id,\r\n        p.name,\r\n        p.description,     \r\n        p.price,\r\n        p.image_url,\r\n        p.category,        \r\n        COUNT(DISTINCT o.id) as total_orders,\r\n        COALESCE(SUM(op.quantity), 0) as total_units_sold,\r\n        COALESCE(AVG(pr.rating), 0) as average_rating,\r\n        COUNT(DISTINCT pr.id) as rating_count,\r\n        ps.quantity as current_stock,\r\n        ps.id as stock_id\r\n      FROM products p\r\n      INNER JOIN ordered_products op ON p.id = op.product_id\r\n      LEFT JOIN orders o ON op.order_id = o.id AND o.status != 'cancelled'\r\n      LEFT JOIN product_ratings pr ON p.id = pr.product_id\r\n      LEFT JOIN product_stocks ps ON p.id = ps.product_id\r\n      WHERE p.deleted = FALSE\r\n      GROUP BY p.id, ps.id, p.description, p.category \r\n      ORDER BY COALESCE(SUM(op.quantity), 0) DESC\r\n    `);\n        const saleableProducts = performanceData.filter((product)=>product.total_units_sold > 20);\n        const nonSaleableProducts = performanceData.filter((product)=>product.total_units_sold < 5 && product.total_units_sold > 0);\n        res.status(200).json({\n            performance: performanceData,\n            saleableProducts: saleableProducts.slice(0, 10),\n            nonSaleableProducts: nonSaleableProducts.slice(0, 10)\n        });\n    } catch (error) {\n        console.error(\"Error fetching product performance:\", error);\n        res.status(500).json({\n            error: \"Error fetching product performance\"\n        });\n    }\n}\n//Login Authentication and Logout\nasync function handleSignIn(req, res) {\n    const { username, password } = req.body;\n    console.log(\"Signin attempt:\", {\n        username\n    });\n    try {\n        const [results] = await db.query(\"SELECT * FROM admin WHERE username = ?\", [\n            username\n        ]);\n        if (results.length === 0) {\n            console.log(\"User not found\");\n            return res.status(401).json({\n                error: \"Invalid username or password\"\n            });\n        }\n        const user = results[0];\n        const passwordMatch = password === user.password;\n        if (!passwordMatch) {\n            console.log(\"Password mismatch\");\n            return res.status(401).json({\n                error: \"Invalid username or password\"\n            });\n        }\n        await db.query(\"INSERT INTO admin_sessions (admin_id, login_time) VALUES (?, NOW())\", [\n            user.id\n        ]);\n        const token = (0,jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.sign)({\n            userId: user.id\n        }, process.env.JWT_SECRET, {\n            expiresIn: \"6h\"\n        });\n        console.log(\"Login successful, token generated\");\n        res.status(200).json({\n            success: true,\n            message: \"Signin successful\",\n            username: user.username,\n            token: token\n        });\n    } catch (error) {\n        console.error(\"Sign in error:\", error);\n        res.status(500).json({\n            error: \"An error occurred during signin\"\n        });\n    }\n}\nasync function handleValidatePin(req, res) {\n    const { pin } = req.body;\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (!token) {\n        return res.status(401).json({\n            error: \"No token provided\"\n        });\n    }\n    try {\n        const decoded = (0,jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.verify)(token, process.env.JWT_SECRET);\n        const [results] = await db.query(\"SELECT pin FROM admin WHERE id = ?\", [\n            decoded.userId\n        ]);\n        if (results.length === 0) {\n            return res.status(404).json({\n                error: \"Admin not found\"\n            });\n        }\n        const storedPin = results[0].pin;\n        if (String(pin) === String(storedPin)) {\n            res.status(200).json({\n                message: \"PIN validated successfully\"\n            });\n        } else {\n            res.status(401).json({\n                error: \"Invalid PIN\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error validating PIN:\", error);\n        res.status(500).json({\n            error: \"An error occurred while validating PIN\"\n        });\n    }\n}\nasync function handleLogout(req, res) {\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (token) {\n        try {\n            const decoded = (0,jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.verify)(token, process.env.JWT_SECRET);\n            await db.query(`\r\n        UPDATE admin_sessions \r\n        SET logout_time = NOW() \r\n        WHERE admin_id = ? AND logout_time IS NULL \r\n        ORDER BY login_time DESC LIMIT 1\r\n      `, [\n                decoded.userId\n            ]);\n        } catch (error) {\n            console.error(\"Error during logout:\", error);\n        }\n    }\n    res.setHeader(\"Set-Cookie\", \"token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly\");\n    res.status(200).json({\n        success: true,\n        message: \"Logout successful\"\n    });\n}\nasync function handleGetAdminData(req, res) {\n    try {\n        const [results] = await db.query(\"SELECT full_name, username, password, pin, role FROM admin LIMIT 1\");\n        if (results.length > 0) {\n            const adminData = results[0];\n            adminData.password = \"*\".repeat(adminData.password.length);\n            adminData.pin = \"*\".repeat(adminData.pin.length);\n            res.status(200).json(adminData);\n        } else {\n            res.status(404).json({\n                error: \"Admin not found\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error fetching admin data:\", error);\n        res.status(500).json({\n            error: \"An error occurred while fetching admin data\"\n        });\n    }\n}\nasync function handleUpdateAdminData(req, res) {\n    const { full_name, username, password, pin, role } = req.body;\n    try {\n        let sql = \"UPDATE admin SET full_name = ?, username = ?, role = ?\";\n        let params = [\n            full_name,\n            username,\n            role\n        ];\n        if (password) {\n            sql += \", password = ?\";\n            params.push(password);\n        }\n        if (pin) {\n            sql += \", pin = ?\";\n            params.push(pin);\n        }\n        sql += \" WHERE id = 1\";\n        const result = await (0,_utils_db__WEBPACK_IMPORTED_MODULE_3__.query)(sql, params);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Admin not found\"\n            });\n        } else {\n            res.status(200).json({\n                message: \"Admin data updated successfully\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating admin data:\", error);\n        res.status(500).json({\n            error: \"An error occurred while updating admin data\"\n        });\n    }\n}\nasync function handleGetSessionHistory(req, res) {\n    try {\n        const [results] = await db.query(`\r\n      SELECT \r\n        s.id, \r\n        a.full_name, \r\n        a.username, \r\n        s.login_time, \r\n        s.logout_time\r\n      FROM \r\n        admin_sessions s\r\n      JOIN \r\n        admin a ON s.admin_id = a.id\r\n      ORDER BY \r\n        s.login_time DESC \r\n      LIMIT 50\r\n    `);\n        res.status(200).json(results);\n    } catch (error) {\n        console.error(\"Error fetching session history:\", error);\n        res.status(500).json({\n            error: \"An error occurred while fetching session history\"\n        });\n    }\n}\n// Products Add-Update-Delete in products table\nasync function handleGetProducts(req, res) {\n    const { page = 1, limit = 10, id } = req.query;\n    const offset = (page - 1) * limit;\n    try {\n        // If ID is provided, fetch single product with its current stock\n        if (id) {\n            const [product] = await db.query(`SELECT p.*, COALESCE(ps.quantity, 0) as current_stock \r\n         FROM products p \r\n         LEFT JOIN product_stocks ps ON p.id = ps.product_id \r\n         WHERE p.id = ? AND p.deleted = FALSE`, [\n                parseInt(id)\n            ]);\n            if (product.length === 0) {\n                return res.status(404).json({\n                    error: \"Product not found\"\n                });\n            }\n            return res.status(200).json({\n                products: product,\n                currentPage: 1,\n                totalPages: 1,\n                totalItems: 1\n            });\n        }\n        // Otherwise, handle paginated list with current stock quantities\n        const [countResult] = await db.query(\"SELECT COUNT(*) as total FROM products WHERE deleted = FALSE\");\n        const totalItems = countResult[0].total;\n        const totalPages = Math.ceil(totalItems / limit);\n        const [products] = await db.query(`SELECT p.*, COALESCE(ps.quantity, 0) as current_stock \r\n       FROM products p \r\n       LEFT JOIN product_stocks ps ON p.id = ps.product_id \r\n       WHERE p.deleted = FALSE \r\n       LIMIT ? OFFSET ?`, [\n            parseInt(limit),\n            offset\n        ]);\n        res.status(200).json({\n            products,\n            currentPage: parseInt(page),\n            totalPages,\n            totalItems\n        });\n    } catch (error) {\n        console.error(\"Error fetching products:\", error);\n        res.status(500).json({\n            error: \"Error fetching products\"\n        });\n    }\n}\nasync function handleGetTotalStock(req, res) {\n    try {\n        const [result] = await db.query(\"SELECT SUM(quantity) as totalStock FROM product_stocks\");\n        res.status(200).json({\n            totalStock: result[0].totalStock || 0\n        });\n    } catch (error) {\n        console.error(\"Error fetching total stock:\", error);\n        res.status(500).json({\n            error: \"Error fetching total stock\"\n        });\n    }\n}\nasync function handleAddProduct(req, res) {\n    const { name, description, price, image_url, category, supplier_id } = req.body;\n    const sql = \"INSERT INTO products (name, description, price, image_url, category, supplier_id) VALUES (?, ?, ?, ?, ?, ?)\";\n    try {\n        const [result] = await db.query(sql, [\n            name,\n            description,\n            price,\n            image_url,\n            category,\n            supplier_id\n        ]);\n        res.status(201).json({\n            message: \"Product added successfully\",\n            id: result.insertId\n        });\n    } catch (error) {\n        console.error(\"Error adding product:\", error);\n        res.status(500).json({\n            error: \"Error adding product\"\n        });\n    }\n}\nasync function handleUpdateProduct(req, res, id) {\n    const { name, description, price, image_url, category, supplier_id } = req.body;\n    const sql = \"UPDATE products SET name=?, description=?, price=?, image_url=?, category=?, supplier_id=? WHERE id=?\";\n    try {\n        const [result] = await db.query(sql, [\n            name,\n            description,\n            price,\n            image_url,\n            category,\n            supplier_id,\n            id\n        ]);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Product not found\"\n            });\n        } else {\n            res.status(200).json({\n                message: \"Product updated successfully\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating product:\", error);\n        res.status(500).json({\n            error: \"Error updating product\"\n        });\n    }\n}\nasync function handleDeleteProduct(req, res, id) {\n    const sql = \"UPDATE products SET deleted = TRUE WHERE id = ?\";\n    try {\n        const [result] = await db.query(sql, [\n            id\n        ]);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Product not found\"\n            });\n        } else {\n            // Also delete associated stock entries\n            await db.query(\"DELETE FROM product_stocks WHERE product_id = ?\", [\n                id\n            ]);\n            res.status(200).json({\n                message: \"Product marked as deleted successfully\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error marking product as deleted:\", error);\n        res.status(500).json({\n            error: \"Error marking product as deleted\"\n        });\n    }\n}\n// Stock Management Endpoints\nasync function handleGetStocks(req, res) {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const offset = (page - 1) * limit;\n    try {\n        const [stocks] = await db.query(`SELECT \r\n        ps.id,\r\n        ps.product_id,\r\n        p.name,\r\n        ps.quantity,\r\n        ps.last_updated\r\n      FROM product_stocks ps\r\n      JOIN products p ON ps.product_id = p.id\r\n      WHERE p.deleted = FALSE\r\n      ORDER BY ps.last_updated DESC\r\n      LIMIT ? OFFSET ?`, [\n            limit,\n            offset\n        ]);\n        const [countResult] = await db.query(\"SELECT COUNT(*) as total FROM product_stocks ps JOIN products p ON ps.product_id = p.id WHERE p.deleted = FALSE\");\n        const totalItems = countResult[0].total;\n        const totalPages = Math.ceil(totalItems / limit);\n        res.status(200).json({\n            stocks,\n            totalPages,\n            totalItems,\n            currentPage: page\n        });\n    } catch (error) {\n        console.error(\"Error fetching stocks:\", error);\n        res.status(500).json({\n            error: \"Error fetching stocks\"\n        });\n    }\n}\nasync function handleAddStock(req, res) {\n    const { id, product_id, quantity } = req.body;\n    try {\n        // First check if stock entry already exists\n        const [existingStock] = await db.query(\"SELECT * FROM product_stocks WHERE id = ? OR product_id = ?\", [\n            id,\n            product_id\n        ]);\n        if (existingStock.length > 0) {\n            // Stock exists, update the quantity instead\n            const newQuantity = existingStock[0].quantity + parseInt(quantity);\n            const updateSql = `\r\n        UPDATE product_stocks \r\n        SET quantity = ?, \r\n            last_updated = NOW()\r\n        WHERE id = ?\r\n      `;\n            await db.query(updateSql, [\n                newQuantity,\n                existingStock[0].id\n            ]);\n            res.status(200).json({\n                message: \"Stock quantity updated successfully\",\n                id: existingStock[0].id,\n                newQuantity\n            });\n        } else {\n            // Stock doesn't exist, create new entry\n            const insertSql = `\r\n        INSERT INTO product_stocks \r\n        (id, product_id, quantity, last_updated) \r\n        VALUES (?, ?, ?, NOW())\r\n      `;\n            const [result] = await db.query(insertSql, [\n                id,\n                product_id,\n                quantity\n            ]);\n            res.status(201).json({\n                message: \"Stock added successfully\",\n                id: result.insertId\n            });\n        }\n    } catch (error) {\n        console.error(\"Error managing stock:\", error);\n        res.status(500).json({\n            error: \"Error managing stock\"\n        });\n    }\n}\nasync function handleUpdateStock(req, res, id) {\n    const { quantity } = req.body;\n    try {\n        // First, get the current stock\n        const [existingStock] = await db.query(\"SELECT * FROM product_stocks WHERE id = ?\", [\n            id\n        ]);\n        if (existingStock.length === 0) {\n            return res.status(404).json({\n                error: \"Stock entry not found\"\n            });\n        }\n        // Update the stock quantity\n        const sql = `\r\n      UPDATE product_stocks \r\n      SET quantity = ?,\r\n          last_updated = NOW()\r\n      WHERE id = ?\r\n    `;\n        const [result] = await db.query(sql, [\n            quantity,\n            id\n        ]);\n        res.status(200).json({\n            message: \"Stock updated successfully\",\n            updatedStock: {\n                id,\n                quantity,\n                last_updated: new Date()\n            }\n        });\n    } catch (error) {\n        console.error(\"Error updating stock:\", error);\n        res.status(500).json({\n            error: \"Error updating stock\"\n        });\n    }\n}\nasync function handleDeleteStock(req, res, id) {\n    try {\n        const [stock] = await db.query(\"SELECT * FROM product_stocks WHERE id = ?\", [\n            id\n        ]);\n        if (stock.length === 0) {\n            return res.status(404).json({\n                error: \"Stock not found\"\n            });\n        }\n        // Delete the stock record\n        await db.query(\"DELETE FROM product_stocks WHERE id = ?\", [\n            id\n        ]);\n        res.status(200).json({\n            message: \"Stock deleted successfully\"\n        });\n    } catch (error) {\n        console.error(\"Error deleting stock:\", error);\n        res.status(500).json({\n            error: \"Error deleting stock\"\n        });\n    }\n}\n//Order Monitoring\nasync function handleGetSalesReport(req, res) {\n    try {\n        const [result] = await db.query(`\r\n      SELECT \r\n        o.*,\r\n        GROUP_CONCAT(CONCAT(op.name, ' (', op.quantity, ')') SEPARATOR ', ') AS ordered_products\r\n      FROM orders o\r\n      LEFT JOIN ordered_products op ON o.id = op.order_id\r\n      WHERE o.in_sales_report = 1\r\n      GROUP BY o.id\r\n      ORDER BY o.order_date DESC\r\n    `);\n        res.status(200).json(result);\n    } catch (error) {\n        console.error(\"Error fetching sales report:\", error);\n        res.status(500).json({\n            error: \"An error occurred while fetching sales report data\"\n        });\n    }\n}\nasync function handleUpdateOrderStatus(req, res, id) {\n    const { status } = req.body;\n    console.log(\"Updating order status:\", id, status);\n    const sql = \"UPDATE orders SET status = ? WHERE id = ?\";\n    try {\n        const [result] = await db.query(sql, [\n            status,\n            id\n        ]);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Order not found\"\n            });\n        } else {\n            res.status(200).json({\n                message: \"Order status updated successfully\",\n                status: status\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating order status:\", error);\n        res.status(500).json({\n            error: \"Error updating order status\"\n        });\n    }\n}\nasync function handleCancelOrder(req, res, id) {\n    const sql = \"UPDATE orders SET status = 'Cancelled' WHERE id = ?\";\n    try {\n        const [result] = await db.query(sql, [\n            id\n        ]);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Order not found\"\n            });\n        } else {\n            res.status(200).json({\n                message: \"Order cancelled successfully\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error cancelling order:\", error);\n        res.status(500).json({\n            error: \"Error cancelling order\"\n        });\n    }\n}\nasync function handleUpdateOrder(req, res, id) {\n    const { order_date } = req.body;\n    const sql = \"UPDATE orders SET order_date = ? WHERE id = ?\";\n    try {\n        const [result] = await db.query(sql, [\n            order_date,\n            id\n        ]);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Order not found\"\n            });\n        } else {\n            res.status(200).json({\n                message: \"Order date updated successfully\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating order date:\", error);\n        res.status(500).json({\n            error: \"Error updating order date\"\n        });\n    }\n}\nasync function handleRemoveOrderFromSalesReport(req, res) {\n    const { id } = req.query;\n    const sql = \"UPDATE orders SET in_sales_report = 0 WHERE id = ?\";\n    try {\n        const [result] = await db.query(sql, [\n            id\n        ]);\n        if (result.affectedRows === 0) {\n            res.status(404).json({\n                error: \"Order not found\"\n            });\n        } else {\n            res.status(200).json({\n                message: \"Order removed from sales report successfully\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error removing order from sales report:\", error);\n        res.status(500).json({\n            error: \"Error removing order from sales report\"\n        });\n    }\n}\nasync function handleGetOrders(req, res) {\n    try {\n        const [result] = await db.query(`\r\n      SELECT o.*, \r\n             GROUP_CONCAT(\r\n               CONCAT(\r\n                 op.name, \r\n                 ' (', op.quantity, ')',\r\n                 ' [', IFNULL(p.image_url, ''), ']'\r\n               ) \r\n               SEPARATOR ', '\r\n             ) AS ordered_products\r\n      FROM orders o\r\n      LEFT JOIN ordered_products op ON o.id = op.order_id\r\n      LEFT JOIN products p ON op.product_id = p.id\r\n      WHERE o.in_sales_report = 1\r\n      GROUP BY o.id\r\n    `);\n        res.status(200).json(result);\n    } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n        res.status(500).json({\n            error: \"An error occurred while fetching orders\"\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL1suLi5uZXh0YXBpXS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBbUM7QUFDUDtBQUNnQjtBQUNMO0FBRXZDLE1BQU1LLEtBQUtMLGdFQUFnQixDQUFDO0lBQzFCTyxNQUFNQyxRQUFRQyxHQUFHLENBQUNDLFVBQVU7SUFDNUJDLE1BQU1ILFFBQVFDLEdBQUcsQ0FBQ0csVUFBVTtJQUM1QkMsTUFBTUwsUUFBUUMsR0FBRyxDQUFDSyxVQUFVO0lBQzVCQyxVQUFVUCxRQUFRQyxHQUFHLENBQUNPLGNBQWM7SUFDcENDLFVBQVVULFFBQVFDLEdBQUcsQ0FBQ1MsY0FBYztJQUNwQ0Msb0JBQW9CO0lBQ3BCQyxpQkFBaUI7SUFDakJDLFlBQVk7QUFDZDtBQUVlLGVBQWVDLFFBQVFDLEdBQUcsRUFBRUMsR0FBRztJQUM1QyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHRjtJQUNuQixNQUFNLEVBQUVHLFFBQVEsRUFBRXRCLEtBQUssRUFBRSxHQUFHSCwwQ0FBS0EsQ0FBQ3NCLElBQUlJLEdBQUcsRUFBRTtJQUUzQ0MsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQkosUUFBUUMsVUFBVXRCO0lBRW5ELElBQUlzQixhQUFhLGFBQWE7UUFDNUJGLElBQUlNLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsU0FBUztRQUFxQjtRQUNyRDtJQUNGO0lBRUEsSUFBSU4sYUFBYSxtQkFBbUI7UUFDbEMsSUFBSTtZQUNGLE1BQU0sQ0FBQ08sUUFBUSxHQUFHLE1BQU01QixHQUFHRCxLQUFLLENBQUM7WUFDakMsSUFBSTZCLFFBQVFDLE1BQU0sR0FBRyxHQUFHO2dCQUN0QlYsSUFBSU0sTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztvQkFBRUksVUFBVUYsT0FBTyxDQUFDLEVBQUUsQ0FBQ0csU0FBUztnQkFBQztZQUN4RCxPQUFPO2dCQUNMWixJQUFJTSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO29CQUFFTSxPQUFPO2dCQUFr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QUssQ0FBQywwQkFBMEJBO1FBQ3hDYixJQUFJTSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVNLE9BQU87UUFBMEM7SUFDMUU7QUFDRjtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FkbWlucGFuZWwvLi9zcmMvcGFnZXMvYXBpL1suLi5uZXh0YXBpXS5qcz8yODc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBteXNxbCBmcm9tICdteXNxbDIvcHJvbWlzZSc7XHJcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAndXJsJztcclxuaW1wb3J0IHsgc2lnbiwgdmVyaWZ5IH0gZnJvbSAnanNvbndlYnRva2VuJztcclxuaW1wb3J0IHsgcXVlcnkgfSBmcm9tICcuLi8uLi91dGlscy9kYic7XHJcblxyXG5jb25zdCBkYiA9IG15c3FsLmNyZWF0ZVBvb2woe1xyXG4gIGhvc3Q6IHByb2Nlc3MuZW52Lk1ZU1FMX0hPU1QsXHJcbiAgcG9ydDogcHJvY2Vzcy5lbnYuTVlTUUxfUE9SVCxcclxuICB1c2VyOiBwcm9jZXNzLmVudi5NWVNRTF9VU0VSLFxyXG4gIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5NWVNRTF9QQVNTV09SRCxcclxuICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuTVlTUUxfREFUQUJBU0UsXHJcbiAgd2FpdEZvckNvbm5lY3Rpb25zOiB0cnVlLFxyXG4gIGNvbm5lY3Rpb25MaW1pdDogMTAsXHJcbiAgcXVldWVMaW1pdDogMFxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcclxuICBjb25zdCB7IG1ldGhvZCB9ID0gcmVxO1xyXG4gIGNvbnN0IHsgcGF0aG5hbWUsIHF1ZXJ5IH0gPSBwYXJzZShyZXEudXJsLCB0cnVlKTtcclxuXHJcbiAgY29uc29sZS5sb2coJ1JlY2VpdmVkIHJlcXVlc3Q6JywgbWV0aG9kLCBwYXRobmFtZSwgcXVlcnkpO1xyXG5cclxuICBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3Rlc3QnKSB7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdUZXN0IHJvdXRlIHdvcmtpbmcnIH0pO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9hZG1pbi1uYW1lJykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgZGIucXVlcnkoJ1NFTEVDVCBmdWxsX25hbWUgRlJPTSBhZG1pbiBMSU1JVCAxJyk7XHJcbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IGZ1bGxOYW1lOiByZXN1bHRzWzBdLmZ1bGxfbmFtZSB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnQWRtaW4gbm90IGZvdW5kJyB9KTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYWRtaW4gbmFtZTonLCBlcnJvcik7XHJcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBmZXRjaGluZyBhZG1pbiBuYW1lJyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xyXG4gICAgICBjYXNlICdHRVQnOlxyXG4gICAgXHJcbiAgICAgICAgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9jaGVjay1hdXRoJykge1xyXG4gICAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb247XHJcbiAgICAgICAgICBpZiAoIWF1dGhIZWFkZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSwgdXNlcm5hbWVQYXNzd29yZFZlcmlmaWVkOiBmYWxzZSB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdO1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IHZlcmlmeSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGRlY29kZWQuZXhwICYmIGRlY29kZWQuZXhwID4gbm93KSB7XHJcbiAgICAgICAgICAgICAgLy8gVG9rZW4gaXMgc3RpbGwgdmFsaWRcclxuICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBcclxuICAgICAgICAgICAgICAgIGlzQXV0aGVudGljYXRlZDogdHJ1ZSwgXHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZVBhc3N3b3JkVmVyaWZpZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBleHBpcmVzSW46IGRlY29kZWQuZXhwIC0gbm93XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gVG9rZW4gaGFzIGV4cGlyZWRcclxuICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLCB1c2VybmFtZVBhc3N3b3JkVmVyaWZpZWQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLCB1c2VybmFtZVBhc3N3b3JkVmVyaWZpZWQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSAgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9wcm9kdWN0cycpIHtcclxuICAgICAgICAgIGF3YWl0IGhhbmRsZUdldFByb2R1Y3RzKHJlcSwgcmVzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9zdG9ja3MnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXRTdG9ja3MocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3RvdGFsLXN0b2NrJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0VG90YWxTdG9jayhyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvc2FsZXMtcmVwb3J0Jykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0U2FsZXNSZXBvcnQocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3NhbGVzLWRhdGEnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXRTYWxlc0RhdGEocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3RvdGFsLXByb2R1Y3RzJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0VG90YWxQcm9kdWN0cyhyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvdG9wLXByb2R1Y3RzJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0VG9wUHJvZHVjdHMocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3JhdGVkLXByb2R1Y3RzLWNvdW50Jykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0UmF0ZWRQcm9kdWN0c0NvdW50KHJlcSwgcmVzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9sb2dvdXQnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVMb2dvdXQocmVxLCByZXMpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL29yZGVycycpIHtcclxuICAgICAgICAgIGF3YWl0IGhhbmRsZUdldE9yZGVycyhyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlICBpZiAocGF0aG5hbWUgPT09ICcvYXBpL2FkbWluLWRhdGEnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXRBZG1pbkRhdGEocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3Nlc3Npb24taGlzdG9yeScpIHtcclxuICAgICAgICAgIGF3YWl0IGhhbmRsZUdldFNlc3Npb25IaXN0b3J5KHJlcSwgcmVzKTtcclxuICAgICAgICB9IGVsc2UgIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvcHJvZHVjdC1hbmFseXRpY3MnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXRQcm9kdWN0QW5hbHl0aWNzKHJlcSwgcmVzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9wcm9kdWN0LXBlcmZvcm1hbmNlJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0UHJvZHVjdFBlcmZvcm1hbmNlKHJlcSwgcmVzKTtcclxuICAgICAgICB9ICBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvZGFpbHktc2FsZXMnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXREYWlseVNhbGVzKHJlcSwgcmVzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS93ZWVrbHktc2FsZXMnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXRXZWVrbHlTYWxlcyhyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvbW9udGhseS1zYWxlcycpIHtcclxuICAgICAgICAgIGF3YWl0IGhhbmRsZUdldE1vbnRobHlTYWxlcyhyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkveWVhcmx5LXNhbGVzJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlR2V0WWVhcmx5U2FsZXMocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUgPT09ICcvYXBpL29yZGVyLWRldGFpbHMnKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVHZXRPcmRlckRldGFpbHMocmVxLCByZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ1BPU1QnOlxyXG4gICAgICAgIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvc2lnbmluJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlU2lnbkluKHJlcSwgcmVzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS92YWxpZGF0ZS1waW4nKSB7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVWYWxpZGF0ZVBpbihyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlICBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3Byb2R1Y3RzJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlQWRkUHJvZHVjdChyZXEsIHJlcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvc3RvY2tzJykge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlQWRkU3RvY2socmVxLCByZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgXHJcbiAgICAgIGNhc2UgJ1BVVCc6XHJcbiAgICAgICAgaWYgKHBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9hcGkvcHJvZHVjdHMvJykpIHtcclxuICAgICAgICAgIGNvbnN0IGlkID0gcGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKTtcclxuICAgICAgICAgIGF3YWl0IGhhbmRsZVVwZGF0ZVByb2R1Y3QocmVxLCByZXMsIGlkKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9hcGkvc3RvY2tzLycpKSB7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IHBhdGhuYW1lLnNwbGl0KCcvJykucG9wKCk7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVVcGRhdGVTdG9jayhyZXEsIHJlcywgaWQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUuc3RhcnRzV2l0aCgnL2FwaS9vcmRlcnMvJykpIHtcclxuICAgIGNvbnN0IHBhcnRzID0gcGF0aG5hbWUuc3BsaXQoJy8nKTtcclxuICAgIGNvbnN0IGlkID0gcGFydHNbM107IC8vIFRoaXMgaXMgdGhlIG9yZGVyIElEXHJcbiAgICBpZiAocGFydHNbNF0gPT09ICdzdGF0dXMnKSB7XHJcbiAgICAgIGF3YWl0IGhhbmRsZVVwZGF0ZU9yZGVyU3RhdHVzKHJlcSwgcmVzLCBpZCk7XHJcbiAgICB9IGVsc2UgaWYgKHBhcnRzWzRdID09PSAnY2FuY2VsJykge1xyXG4gICAgICBhd2FpdCBoYW5kbGVDYW5jZWxPcmRlcihyZXEsIHJlcywgaWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXdhaXQgaGFuZGxlVXBkYXRlT3JkZXIocmVxLCByZXMsIGlkKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHBhdGhuYW1lID09PSAnL2FwaS91cGRhdGUtYWRtaW4nKSB7XHJcbiAgICBhd2FpdCBoYW5kbGVVcGRhdGVBZG1pbkRhdGEocmVxLCByZXMpO1xyXG4gIH1cclxuICBicmVhaztcclxuICBjYXNlICdERUxFVEUnOlxyXG4gICAgICAgIGlmIChwYXRobmFtZS5zdGFydHNXaXRoKCcvYXBpL3Byb2R1Y3RzLycpKSB7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IHBhdGhuYW1lLnNwbGl0KCcvJykucG9wKCk7XHJcbiAgICAgICAgICBhd2FpdCBoYW5kbGVEZWxldGVQcm9kdWN0KHJlcSwgcmVzLCBpZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZS5zdGFydHNXaXRoKCcvYXBpL3N0b2Nrcy8nKSkge1xyXG4gICAgICAgICAgY29uc3QgaWQgPSBwYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpO1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlRGVsZXRlU3RvY2socmVxLCByZXMsIGlkKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9hcGkvb3JkZXJzLycpICYmIHBhdGhuYW1lLmVuZHNXaXRoKCcvc2FsZXNyZXBvcnQnKSkge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlUmVtb3ZlT3JkZXJGcm9tU2FsZXNSZXBvcnQocmVxLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnUm91dGUgbm90IGZvdW5kJyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0FsbG93JywgWydHRVQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10pO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDA1KS5lbmQoYE1ldGhvZCAke21ldGhvZH0gTm90IEFsbG93ZWRgKTtcclxuICAgIH1cclxuXHJcbiAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1JvdXRlIG5vdCBmb3VuZCcgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIEFQSSByb3V0ZTonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QnIH0pO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbi8vU2FsZXMgUmVwb3J0IFxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRPcmRlckRldGFpbHMocmVxLCByZXMpIHtcclxuICBjb25zdCB7IGRhdGUgfSA9IHJlcS5xdWVyeTtcclxuICBsZXQgZGF0ZUNvbmRpdGlvbjtcclxuICBcclxuICBpZiAoIWRhdGUpIHtcclxuICAgIGRhdGVDb25kaXRpb24gPSAnREFURShvLm9yZGVyX2RhdGUpID0gQ1VSREFURSgpJztcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgcXVlcnlEYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICBkYXRlQ29uZGl0aW9uID0gYERBVEUoby5vcmRlcl9kYXRlKSA9IERBVEUoJyR7cXVlcnlEYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXX0nKWA7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgICBTRUxFQ1QgXHJcbiAgICAgICAgby5vcmRlcl9kYXRlLFxyXG4gICAgICAgIG8uZnVsbF9uYW1lLFxyXG4gICAgICAgIG9wLm5hbWUgYXMgcHJvZHVjdF9uYW1lLFxyXG4gICAgICAgIG9wLnF1YW50aXR5LFxyXG4gICAgICAgIG8udG90YWwsXHJcbiAgICAgICAgcC5pbWFnZV91cmxcclxuICAgICAgRlJPTSBvcmRlcnMgb1xyXG4gICAgICBKT0lOIG9yZGVyZWRfcHJvZHVjdHMgb3AgT04gby5pZCA9IG9wLm9yZGVyX2lkXHJcbiAgICAgIEpPSU4gcHJvZHVjdHMgcCBPTiBvcC5wcm9kdWN0X2lkID0gcC5pZFxyXG4gICAgICBXSEVSRSBcclxuICAgICAgICAke2RhdGVDb25kaXRpb259XHJcbiAgICAgICAgQU5EIG8uc3RhdHVzID0gJ0RlbGl2ZXJlZCdcclxuICAgICAgICBBTkQgby5pbl9zYWxlc19yZXBvcnQgPSAxXHJcbiAgICAgIE9SREVSIEJZIG8ub3JkZXJfZGF0ZSBERVNDXHJcbiAgICBgKTtcclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHRzKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgb3JkZXIgZGV0YWlsczonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgZmV0Y2hpbmcgb3JkZXIgZGV0YWlscycgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRNb250aGx5U2FsZXMocmVxLCByZXMpIHtcclxuICBjb25zdCB7IHllYXIgfSA9IHJlcS5xdWVyeTtcclxuICBjb25zdCBjdXJyZW50WWVhciA9IHllYXIgfHwgbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgICBTRUxFQ1QgXHJcbiAgICAgICAgTU9OVEgob3JkZXJfZGF0ZSkgYXMgbW9udGgsXHJcbiAgICAgICAgU1VNKENBU0UgV0hFTiBzdGF0dXMgPSAnRGVsaXZlcmVkJyBBTkQgaW5fc2FsZXNfcmVwb3J0ID0gMSBUSEVOIDEgRUxTRSAwIEVORCkgYXMgb3JkZXJDb3VudCxcclxuICAgICAgICBDQVNUKENPQUxFU0NFKFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0RlbGl2ZXJlZCcgQU5EIGluX3NhbGVzX3JlcG9ydCA9IDEgVEhFTiB0b3RhbCBFTFNFIDAgRU5EKSwgMCkgQVMgREVDSU1BTCgxMCwyKSkgYXMgdG90YWwsXHJcbiAgICAgICAgU1VNKENBU0UgV0hFTiBzdGF0dXMgPSAnQ2FuY2VsbGVkJyBUSEVOIDEgRUxTRSAwIEVORCkgYXMgY2FuY2VsbGVkQ291bnQsXHJcbiAgICAgICAgQ0FTVChDT0FMRVNDRShTVU0oQ0FTRSBXSEVOIHN0YXR1cyA9ICdDYW5jZWxsZWQnIFRIRU4gdG90YWwgRUxTRSAwIEVORCksIDApIEFTIERFQ0lNQUwoMTAsMikpIGFzIGNhbmNlbGxlZFRvdGFsXHJcbiAgICAgIEZST00gb3JkZXJzXHJcbiAgICAgIFdIRVJFIFlFQVIob3JkZXJfZGF0ZSkgPSA/XHJcbiAgICAgIEdST1VQIEJZIE1PTlRIKG9yZGVyX2RhdGUpXHJcbiAgICAgIE9SREVSIEJZIG1vbnRoXHJcbiAgICBgLCBbY3VycmVudFllYXJdKTtcclxuXHJcbiAgICBjb25zdCBmb3JtYXR0ZWRSZXN1bHRzID0gcmVzdWx0cy5tYXAocm93ID0+ICh7XHJcbiAgICAgIG1vbnRoOiByb3cubW9udGgsXHJcbiAgICAgIG9yZGVyQ291bnQ6IE51bWJlcihyb3cub3JkZXJDb3VudCksXHJcbiAgICAgIHRvdGFsOiBOdW1iZXIocm93LnRvdGFsKSxcclxuICAgICAgY2FuY2VsbGVkQ291bnQ6IE51bWJlcihyb3cuY2FuY2VsbGVkQ291bnQpLFxyXG4gICAgICBjYW5jZWxsZWRUb3RhbDogTnVtYmVyKHJvdy5jYW5jZWxsZWRUb3RhbClcclxuICAgIH0pKTtcclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihmb3JtYXR0ZWRSZXN1bHRzKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbW9udGhseSBzYWxlczonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgZmV0Y2hpbmcgbW9udGhseSBzYWxlcyBkYXRhJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldERhaWx5U2FsZXMocmVxLCByZXMpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgICBTRUxFQ1QgXHJcbiAgICAgICAgREFZT0ZXRUVLKG9yZGVyX2RhdGUpIGFzIHBlcmlvZCxcclxuICAgICAgICBTVU0oQ0FTRSBXSEVOIHN0YXR1cyA9ICdEZWxpdmVyZWQnIEFORCBpbl9zYWxlc19yZXBvcnQgPSAxIFRIRU4gMSBFTFNFIDAgRU5EKSBhcyBvcmRlcnMsXHJcbiAgICAgICAgQ0FTVChDT0FMRVNDRShTVU0oQ0FTRSBXSEVOIHN0YXR1cyA9ICdEZWxpdmVyZWQnIEFORCBpbl9zYWxlc19yZXBvcnQgPSAxIFRIRU4gdG90YWwgRUxTRSAwIEVORCksIDApIEFTIERFQ0lNQUwoMTAsMikpIGFzIHRvdGFsLFxyXG4gICAgICAgIFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0NhbmNlbGxlZCcgVEhFTiAxIEVMU0UgMCBFTkQpIGFzIGNhbmNlbGxlZE9yZGVycyxcclxuICAgICAgICBDQVNUKENPQUxFU0NFKFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0NhbmNlbGxlZCcgVEhFTiB0b3RhbCBFTFNFIDAgRU5EKSwgMCkgQVMgREVDSU1BTCgxMCwyKSkgYXMgY2FuY2VsbGVkVG90YWxcclxuICAgICAgRlJPTSBvcmRlcnNcclxuICAgICAgV0hFUkUgWUVBUldFRUsob3JkZXJfZGF0ZSkgPSBZRUFSV0VFSyhDVVJEQVRFKCkpXHJcbiAgICAgIEdST1VQIEJZIERBWU9GV0VFSyhvcmRlcl9kYXRlKVxyXG4gICAgICBPUkRFUiBCWSBwZXJpb2RcclxuICAgIGApO1xyXG5cclxuICAgIGNvbnN0IGRheXNPZldlZWsgPSBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J107XHJcbiAgICBjb25zdCBmdWxsV2Vla0RhdGEgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiA3IH0sIChfLCBpKSA9PiAoe1xyXG4gICAgICBwZXJpb2Q6IGRheXNPZldlZWtbaV0sXHJcbiAgICAgIG9yZGVyczogMCxcclxuICAgICAgdG90YWw6IDAsXHJcbiAgICAgIGNhbmNlbGxlZE9yZGVyczogMCxcclxuICAgICAgY2FuY2VsbGVkVG90YWw6IDBcclxuICAgIH0pKTtcclxuXHJcbiAgICByZXN1bHRzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgY29uc3QgZGF5SW5kZXggPSByb3cucGVyaW9kIC0gMTtcclxuICAgICAgZnVsbFdlZWtEYXRhW2RheUluZGV4XSA9IHtcclxuICAgICAgICBwZXJpb2Q6IGRheXNPZldlZWtbZGF5SW5kZXhdLFxyXG4gICAgICAgIG9yZGVyczogTnVtYmVyKHJvdy5vcmRlcnMpLFxyXG4gICAgICAgIHRvdGFsOiBOdW1iZXIocm93LnRvdGFsKSxcclxuICAgICAgICBjYW5jZWxsZWRPcmRlcnM6IE51bWJlcihyb3cuY2FuY2VsbGVkT3JkZXJzKSxcclxuICAgICAgICBjYW5jZWxsZWRUb3RhbDogTnVtYmVyKHJvdy5jYW5jZWxsZWRUb3RhbClcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGZ1bGxXZWVrRGF0YSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGRhaWx5IHNhbGVzOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBmZXRjaGluZyBkYWlseSBzYWxlcyBkYXRhJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFdlZWtseVNhbGVzKHJlcSwgcmVzKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtyZXN1bHRzXSA9IGF3YWl0IGRiLnF1ZXJ5KGBcclxuICAgICAgU0VMRUNUIFxyXG4gICAgICAgIFdFRUsob3JkZXJfZGF0ZSkgYXMgd2Vla051bWJlcixcclxuICAgICAgICBNSU4oREFURShvcmRlcl9kYXRlKSkgYXMgd2Vla1N0YXJ0LFxyXG4gICAgICAgIE1BWChEQVRFKG9yZGVyX2RhdGUpKSBhcyB3ZWVrRW5kLFxyXG4gICAgICAgIFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0RlbGl2ZXJlZCcgQU5EIGluX3NhbGVzX3JlcG9ydCA9IDEgVEhFTiAxIEVMU0UgMCBFTkQpIGFzIG9yZGVycyxcclxuICAgICAgICBDQVNUKENPQUxFU0NFKFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0RlbGl2ZXJlZCcgQU5EIGluX3NhbGVzX3JlcG9ydCA9IDEgVEhFTiB0b3RhbCBFTFNFIDAgRU5EKSwgMCkgQVMgREVDSU1BTCgxMCwyKSkgYXMgdG90YWwsXHJcbiAgICAgICAgU1VNKENBU0UgV0hFTiBzdGF0dXMgPSAnQ2FuY2VsbGVkJyBUSEVOIDEgRUxTRSAwIEVORCkgYXMgY2FuY2VsbGVkT3JkZXJzLFxyXG4gICAgICAgIENBU1QoQ09BTEVTQ0UoU1VNKENBU0UgV0hFTiBzdGF0dXMgPSAnQ2FuY2VsbGVkJyBUSEVOIHRvdGFsIEVMU0UgMCBFTkQpLCAwKSBBUyBERUNJTUFMKDEwLDIpKSBhcyBjYW5jZWxsZWRUb3RhbFxyXG4gICAgICBGUk9NIG9yZGVyc1xyXG4gICAgICBXSEVSRSBvcmRlcl9kYXRlID49IERBVEVfU1VCKENVUkRBVEUoKSwgSU5URVJWQUwgNyBXRUVLKVxyXG4gICAgICBHUk9VUCBCWSBXRUVLKG9yZGVyX2RhdGUpXHJcbiAgICAgIE9SREVSIEJZIHdlZWtOdW1iZXJcclxuICAgIGApO1xyXG5cclxuICAgIGNvbnN0IGZvcm1hdHRlZFJlc3VsdHMgPSByZXN1bHRzLm1hcChyb3cgPT4gKHtcclxuICAgICAgcGVyaW9kOiBgV2VlayAke3Jvdy53ZWVrTnVtYmVyfSAoJHtuZXcgRGF0ZShyb3cud2Vla1N0YXJ0KS50b0xvY2FsZURhdGVTdHJpbmcoKX0gLSAke25ldyBEYXRlKHJvdy53ZWVrRW5kKS50b0xvY2FsZURhdGVTdHJpbmcoKX0pYCxcclxuICAgICAgb3JkZXJzOiBOdW1iZXIocm93Lm9yZGVycyksXHJcbiAgICAgIHRvdGFsOiBOdW1iZXIocm93LnRvdGFsKSxcclxuICAgICAgY2FuY2VsbGVkT3JkZXJzOiBOdW1iZXIocm93LmNhbmNlbGxlZE9yZGVycyksXHJcbiAgICAgIGNhbmNlbGxlZFRvdGFsOiBOdW1iZXIocm93LmNhbmNlbGxlZFRvdGFsKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGZvcm1hdHRlZFJlc3VsdHMpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB3ZWVrbHkgc2FsZXM6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIGZldGNoaW5nIHdlZWtseSBzYWxlcyBkYXRhJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFllYXJseVNhbGVzKHJlcSwgcmVzKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xyXG4gICAgXHJcbiAgICBjb25zdCBbcmVzdWx0c10gPSBhd2FpdCBkYi5xdWVyeShgXHJcbiAgICAgIFNFTEVDVCBcclxuICAgICAgICBZRUFSKG9yZGVyX2RhdGUpIGFzIHBlcmlvZCxcclxuICAgICAgICBTVU0oQ0FTRSBXSEVOIHN0YXR1cyA9ICdEZWxpdmVyZWQnIEFORCBpbl9zYWxlc19yZXBvcnQgPSAxIFRIRU4gMSBFTFNFIDAgRU5EKSBhcyBvcmRlcnMsXHJcbiAgICAgICAgQ0FTVChDT0FMRVNDRShTVU0oQ0FTRSBXSEVOIHN0YXR1cyA9ICdEZWxpdmVyZWQnIEFORCBpbl9zYWxlc19yZXBvcnQgPSAxIFRIRU4gdG90YWwgRUxTRSAwIEVORCksIDApIEFTIERFQ0lNQUwoMTAsMikpIGFzIHRvdGFsLFxyXG4gICAgICAgIFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0NhbmNlbGxlZCcgVEhFTiAxIEVMU0UgMCBFTkQpIGFzIGNhbmNlbGxlZE9yZGVycyxcclxuICAgICAgICBDQVNUKENPQUxFU0NFKFNVTShDQVNFIFdIRU4gc3RhdHVzID0gJ0NhbmNlbGxlZCcgVEhFTiB0b3RhbCBFTFNFIDAgRU5EKSwgMCkgQVMgREVDSU1BTCgxMCwyKSkgYXMgY2FuY2VsbGVkVG90YWxcclxuICAgICAgRlJPTSBvcmRlcnNcclxuICAgICAgV0hFUkUgWUVBUihvcmRlcl9kYXRlKSA+PSA/XHJcbiAgICAgIEdST1VQIEJZIFlFQVIob3JkZXJfZGF0ZSlcclxuICAgICAgT1JERVIgQlkgcGVyaW9kXHJcbiAgICBgLCBbY3VycmVudFllYXIgLSA0XSk7XHJcblxyXG4gICAgY29uc3QgeWVhcmx5RGF0YSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKF8sIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IHllYXIgPSBjdXJyZW50WWVhciAtIDQgKyBpbmRleDtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwZXJpb2Q6IHllYXIudG9TdHJpbmcoKSxcclxuICAgICAgICBvcmRlcnM6IDAsXHJcbiAgICAgICAgdG90YWw6IDAsXHJcbiAgICAgICAgY2FuY2VsbGVkT3JkZXJzOiAwLFxyXG4gICAgICAgIGNhbmNlbGxlZFRvdGFsOiAwXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXN1bHRzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgY29uc3QgeWVhckluZGV4ID0gcm93LnBlcmlvZCAtIChjdXJyZW50WWVhciAtIDQpO1xyXG4gICAgICBpZiAoeWVhckluZGV4ID49IDAgJiYgeWVhckluZGV4IDwgNSkge1xyXG4gICAgICAgIHllYXJseURhdGFbeWVhckluZGV4XSA9IHtcclxuICAgICAgICAgIHBlcmlvZDogcm93LnBlcmlvZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgb3JkZXJzOiBOdW1iZXIocm93Lm9yZGVycyksXHJcbiAgICAgICAgICB0b3RhbDogTnVtYmVyKHJvdy50b3RhbCksXHJcbiAgICAgICAgICBjYW5jZWxsZWRPcmRlcnM6IE51bWJlcihyb3cuY2FuY2VsbGVkT3JkZXJzKSxcclxuICAgICAgICAgIGNhbmNlbGxlZFRvdGFsOiBOdW1iZXIocm93LmNhbmNlbGxlZFRvdGFsKVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHllYXJseURhdGEpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB5ZWFybHkgc2FsZXM6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIGZldGNoaW5nIHllYXJseSBzYWxlcyBkYXRhJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFNhbGVzRGF0YShyZXEsIHJlcykge1xyXG4gIGNvbnN0IHsgZGF0ZSB9ID0gcmVxLnF1ZXJ5O1xyXG4gIGxldCBkYXRlQ29uZGl0aW9uO1xyXG4gIFxyXG4gIGlmICghZGF0ZSkge1xyXG4gICAgZGF0ZUNvbmRpdGlvbiA9ICdEQVRFKG9yZGVyX2RhdGUpID0gQ1VSREFURSgpJztcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgcXVlcnlEYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICBkYXRlQ29uZGl0aW9uID0gYERBVEUob3JkZXJfZGF0ZSkgPSBEQVRFKCcke3F1ZXJ5RGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF19JylgO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtzYWxlc1Jlc3VsdF0gPSBhd2FpdCBkYi5xdWVyeShgXHJcbiAgICAgIFNFTEVDVCBDT0FMRVNDRShTVU0odG90YWwpLCAwKSBhcyBwZXJpb2RTYWxlc1xyXG4gICAgICBGUk9NIG9yZGVyc1xyXG4gICAgICBXSEVSRSAke2RhdGVDb25kaXRpb259IEFORCBzdGF0dXMgPSAnRGVsaXZlcmVkJ1xyXG4gICAgYCk7XHJcblxyXG4gICAgY29uc3QgW29yZGVyc1Jlc3VsdF0gPSBhd2FpdCBkYi5xdWVyeShgXHJcbiAgICAgIFNFTEVDVCBDT1VOVCgqKSBhcyB0b3RhbE9yZGVyc1xyXG4gICAgICBGUk9NIG9yZGVyc1xyXG4gICAgICBXSEVSRSAke2RhdGVDb25kaXRpb259XHJcbiAgICBgKTtcclxuXHJcbiAgICBjb25zdCBbY3VzdG9tZXJzUmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KGBcclxuICAgICAgU0VMRUNUIENPVU5UKERJU1RJTkNUIHVzZXJfaWQpIGFzIHRvdGFsQ3VzdG9tZXJzXHJcbiAgICAgIEZST00gb3JkZXJzXHJcbiAgICAgIFdIRVJFICR7ZGF0ZUNvbmRpdGlvbn1cclxuICAgIGApO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgcGVyaW9kU2FsZXM6IE51bWJlcihzYWxlc1Jlc3VsdFswXS5wZXJpb2RTYWxlcyksXHJcbiAgICAgIHRvdGFsT3JkZXJzOiBvcmRlcnNSZXN1bHRbMF0udG90YWxPcmRlcnMsXHJcbiAgICAgIHRvdGFsQ3VzdG9tZXJzOiBjdXN0b21lcnNSZXN1bHRbMF0udG90YWxDdXN0b21lcnNcclxuICAgIH07XHJcblxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc2FsZXMgZGF0YTonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgZmV0Y2hpbmcgc2FsZXMgZGF0YScgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vL0RhdGEgQW5hbHl0aWNzIGZvciBQcm9kdWN0c1xyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRUb3BQcm9kdWN0cyhyZXEsIHJlcykge1xyXG4gIGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgU0VMRUNUIFxyXG4gICAgICBwLmlkLFxyXG4gICAgICBwLm5hbWUsXHJcbiAgICAgIHAuaW1hZ2VfdXJsLFxyXG4gICAgICBDT0FMRVNDRShBVkcocHIucmF0aW5nKSwgMCkgYXMgYXZnX3JhdGluZyxcclxuICAgICAgQ09BTEVTQ0UoU1VNKG9wLnF1YW50aXR5KSwgMCkgYXMgc29sZFxyXG4gICAgRlJPTSBwcm9kdWN0cyBwXHJcbiAgICBMRUZUIEpPSU4gb3JkZXJlZF9wcm9kdWN0cyBvcCBPTiBwLmlkID0gb3AucHJvZHVjdF9pZFxyXG4gICAgTEVGVCBKT0lOIHByb2R1Y3RfcmF0aW5ncyBwciBPTiBwLmlkID0gcHIucHJvZHVjdF9pZFxyXG4gICAgR1JPVVAgQlkgcC5pZFxyXG4gICAgT1JERVIgQlkgc29sZCBERVNDLCBhdmdfcmF0aW5nIERFU0NcclxuICAgIExJTUlUIDVcclxuICBgKTtcclxuICBcclxuICBjb25zdCBmb3JtYXR0ZWRSZXN1bHQgPSByZXN1bHQubWFwKHByb2R1Y3QgPT4gKHtcclxuICAgIC4uLnByb2R1Y3QsXHJcbiAgICBhdmdfcmF0aW5nOiBOdW1iZXIocHJvZHVjdC5hdmdfcmF0aW5nKS50b0ZpeGVkKDEpXHJcbiAgfSkpO1xyXG4gIFxyXG4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKGZvcm1hdHRlZFJlc3VsdCk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFJhdGVkUHJvZHVjdHNDb3VudChyZXEsIHJlcykge1xyXG4gIGNvbnN0IHsgdGltZUZyYW1lIH0gPSByZXEucXVlcnk7XHJcbiAgbGV0IGRhdGVDb25kaXRpb247XHJcblxyXG4gIHN3aXRjaCAodGltZUZyYW1lKSB7XHJcbiAgICBjYXNlICd0b2RheSc6XHJcbiAgICAgIGRhdGVDb25kaXRpb24gPSAnREFURShjcmVhdGVkX2F0KSA9IENVUkRBVEUoKSc7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAneWVzdGVyZGF5JzpcclxuICAgICAgZGF0ZUNvbmRpdGlvbiA9ICdEQVRFKGNyZWF0ZWRfYXQpID0gREFURV9TVUIoQ1VSREFURSgpLCBJTlRFUlZBTCAxIERBWSknO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2xhc3RXZWVrJzpcclxuICAgICAgZGF0ZUNvbmRpdGlvbiA9ICdEQVRFKGNyZWF0ZWRfYXQpIEJFVFdFRU4gREFURV9TVUIoQ1VSREFURSgpLCBJTlRFUlZBTCAxIFdFRUspIEFORCBDVVJEQVRFKCknO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2xhc3RNb250aCc6XHJcbiAgICAgIGRhdGVDb25kaXRpb24gPSAnREFURShjcmVhdGVkX2F0KSBCRVRXRUVOIERBVEVfU1VCKENVUkRBVEUoKSwgSU5URVJWQUwgMSBNT05USCkgQU5EIENVUkRBVEUoKSc7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgZGF0ZUNvbmRpdGlvbiA9ICdEQVRFKGNyZWF0ZWRfYXQpID0gQ1VSREFURSgpJztcclxuICB9XHJcblxyXG4gIGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgU0VMRUNUIENPVU5UKERJU1RJTkNUIHByb2R1Y3RfaWQpIGFzIHJhdGVkUHJvZHVjdHNDb3VudFxyXG4gICAgRlJPTSBwcm9kdWN0X3JhdGluZ3NcclxuICAgIFdIRVJFICR7ZGF0ZUNvbmRpdGlvbn1cclxuICBgKTtcclxuXHJcbiAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0WzBdKTtcclxufVxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFRvdGFsUHJvZHVjdHMocmVxLCByZXMpIHtcclxuICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KCdTRUxFQ1QgQ09VTlQoKikgYXMgdG90YWxQcm9kdWN0cyBGUk9NIHByb2R1Y3RzJyk7XHJcbiAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0WzBdKTtcclxufVxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFByb2R1Y3RBbmFseXRpY3MocmVxLCByZXMpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Byb2R1Y3RzXSA9IGF3YWl0IGRiLnF1ZXJ5KGBcclxuICAgICAgU0VMRUNUIFxyXG4gICAgICAgIHAuKixcclxuICAgICAgICBDT0FMRVNDRShwcy5xdWFudGl0eSwgMCkgYXMgY3VycmVudF9zdG9jayxcclxuICAgICAgICBDT0FMRVNDRShBVkcocHIucmF0aW5nKSwgMCkgYXMgYXZnX3JhdGluZyxcclxuICAgICAgICBDT1VOVChESVNUSU5DVCBvLmlkKSBhcyBvcmRlcl9jb3VudFxyXG4gICAgICBGUk9NIHByb2R1Y3RzIHBcclxuICAgICAgTEVGVCBKT0lOIHByb2R1Y3Rfc3RvY2tzIHBzIE9OIHAuaWQgPSBwcy5wcm9kdWN0X2lkXHJcbiAgICAgIExFRlQgSk9JTiBwcm9kdWN0X3JhdGluZ3MgcHIgT04gcC5pZCA9IHByLnByb2R1Y3RfaWRcclxuICAgICAgTEVGVCBKT0lOIG9yZGVyZWRfcHJvZHVjdHMgb3AgT04gcC5pZCA9IG9wLnByb2R1Y3RfaWRcclxuICAgICAgTEVGVCBKT0lOIG9yZGVycyBvIE9OIG9wLm9yZGVyX2lkID0gby5pZFxyXG4gICAgICBXSEVSRSBwLmRlbGV0ZWQgPSBGQUxTRVxyXG4gICAgICBHUk9VUCBCWSBwLmlkXHJcbiAgICBgKTtcclxuXHJcbiAgICBjb25zdCBhbmFseXplZFByb2R1Y3RzID0gcHJvZHVjdHMubWFwKHByb2R1Y3QgPT4gKHtcclxuICAgICAgLi4ucHJvZHVjdCxcclxuICAgICAgaXNTYWxlYWJsZTogKFxyXG4gICAgICAgIHByb2R1Y3Qub3JkZXJfY291bnQgPiAwICYmXHJcbiAgICAgICAgcHJvZHVjdC5hdmdfcmF0aW5nID49IDMuNSAmJlxyXG4gICAgICAgIHByb2R1Y3QuY3VycmVudF9zdG9jayA+IDBcclxuICAgICAgKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIGNvbnN0IHNhbGVhYmxlUHJvZHVjdHMgPSBhbmFseXplZFByb2R1Y3RzLmZpbHRlcihwID0+IHAuaXNTYWxlYWJsZSk7XHJcbiAgICBjb25zdCBub25TYWxlYWJsZVByb2R1Y3RzID0gYW5hbHl6ZWRQcm9kdWN0cy5maWx0ZXIocCA9PiAhcC5pc1NhbGVhYmxlKTtcclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgIHNhbGVhYmxlUHJvZHVjdHMsXHJcbiAgICAgIG5vblNhbGVhYmxlUHJvZHVjdHMsXHJcbiAgICAgIHRvdGFsUHJvZHVjdHM6IHByb2R1Y3RzLmxlbmd0aCxcclxuICAgICAgc2FsZWFibGVDb3VudDogc2FsZWFibGVQcm9kdWN0cy5sZW5ndGgsXHJcbiAgICAgIG5vblNhbGVhYmxlQ291bnQ6IG5vblNhbGVhYmxlUHJvZHVjdHMubGVuZ3RoXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvZHVjdCBhbmFseXRpY3M6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIGZldGNoaW5nIHByb2R1Y3QgYW5hbHl0aWNzJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldFByb2R1Y3RQZXJmb3JtYW5jZShyZXEsIHJlcykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcGVyZm9ybWFuY2VEYXRhXSA9IGF3YWl0IGRiLnF1ZXJ5KGBcclxuICAgICAgU0VMRUNUIFxyXG4gICAgICAgIHAuaWQsXHJcbiAgICAgICAgcC5uYW1lLFxyXG4gICAgICAgIHAuZGVzY3JpcHRpb24sICAgICBcclxuICAgICAgICBwLnByaWNlLFxyXG4gICAgICAgIHAuaW1hZ2VfdXJsLFxyXG4gICAgICAgIHAuY2F0ZWdvcnksICAgICAgICBcclxuICAgICAgICBDT1VOVChESVNUSU5DVCBvLmlkKSBhcyB0b3RhbF9vcmRlcnMsXHJcbiAgICAgICAgQ09BTEVTQ0UoU1VNKG9wLnF1YW50aXR5KSwgMCkgYXMgdG90YWxfdW5pdHNfc29sZCxcclxuICAgICAgICBDT0FMRVNDRShBVkcocHIucmF0aW5nKSwgMCkgYXMgYXZlcmFnZV9yYXRpbmcsXHJcbiAgICAgICAgQ09VTlQoRElTVElOQ1QgcHIuaWQpIGFzIHJhdGluZ19jb3VudCxcclxuICAgICAgICBwcy5xdWFudGl0eSBhcyBjdXJyZW50X3N0b2NrLFxyXG4gICAgICAgIHBzLmlkIGFzIHN0b2NrX2lkXHJcbiAgICAgIEZST00gcHJvZHVjdHMgcFxyXG4gICAgICBJTk5FUiBKT0lOIG9yZGVyZWRfcHJvZHVjdHMgb3AgT04gcC5pZCA9IG9wLnByb2R1Y3RfaWRcclxuICAgICAgTEVGVCBKT0lOIG9yZGVycyBvIE9OIG9wLm9yZGVyX2lkID0gby5pZCBBTkQgby5zdGF0dXMgIT0gJ2NhbmNlbGxlZCdcclxuICAgICAgTEVGVCBKT0lOIHByb2R1Y3RfcmF0aW5ncyBwciBPTiBwLmlkID0gcHIucHJvZHVjdF9pZFxyXG4gICAgICBMRUZUIEpPSU4gcHJvZHVjdF9zdG9ja3MgcHMgT04gcC5pZCA9IHBzLnByb2R1Y3RfaWRcclxuICAgICAgV0hFUkUgcC5kZWxldGVkID0gRkFMU0VcclxuICAgICAgR1JPVVAgQlkgcC5pZCwgcHMuaWQsIHAuZGVzY3JpcHRpb24sIHAuY2F0ZWdvcnkgXHJcbiAgICAgIE9SREVSIEJZIENPQUxFU0NFKFNVTShvcC5xdWFudGl0eSksIDApIERFU0NcclxuICAgIGApO1xyXG5cclxuICAgIGNvbnN0IHNhbGVhYmxlUHJvZHVjdHMgPSBwZXJmb3JtYW5jZURhdGEuZmlsdGVyKHByb2R1Y3QgPT4gXHJcbiAgICAgIHByb2R1Y3QudG90YWxfdW5pdHNfc29sZCA+IDIwXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG5vblNhbGVhYmxlUHJvZHVjdHMgPSBwZXJmb3JtYW5jZURhdGEuZmlsdGVyKHByb2R1Y3QgPT4gXHJcbiAgICAgIHByb2R1Y3QudG90YWxfdW5pdHNfc29sZCA8IDUgJiYgcHJvZHVjdC50b3RhbF91bml0c19zb2xkID4gMFxyXG4gICAgKTtcclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgIHBlcmZvcm1hbmNlOiBwZXJmb3JtYW5jZURhdGEsXHJcbiAgICAgIHNhbGVhYmxlUHJvZHVjdHM6IHNhbGVhYmxlUHJvZHVjdHMuc2xpY2UoMCwgMTApLFxyXG4gICAgICBub25TYWxlYWJsZVByb2R1Y3RzOiBub25TYWxlYWJsZVByb2R1Y3RzLnNsaWNlKDAsIDEwKVxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHByb2R1Y3QgcGVyZm9ybWFuY2U6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIGZldGNoaW5nIHByb2R1Y3QgcGVyZm9ybWFuY2UnIH0pO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vTG9naW4gQXV0aGVudGljYXRpb24gYW5kIExvZ291dFxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVTaWduSW4ocmVxLCByZXMpIHtcclxuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XHJcbiAgY29uc29sZS5sb2coJ1NpZ25pbiBhdHRlbXB0OicsIHsgdXNlcm5hbWUgfSk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0c10gPSBhd2FpdCBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBhZG1pbiBXSEVSRSB1c2VybmFtZSA9ID8nLCBbdXNlcm5hbWVdKTtcclxuXHJcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS5sb2coJ1VzZXIgbm90IGZvdW5kJyk7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnSW52YWxpZCB1c2VybmFtZSBvciBwYXNzd29yZCcgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXNlciA9IHJlc3VsdHNbMF07XHJcbiAgICBcclxuICAgIGNvbnN0IHBhc3N3b3JkTWF0Y2ggPSBwYXNzd29yZCA9PT0gdXNlci5wYXNzd29yZDtcclxuXHJcbiAgICBpZiAoIXBhc3N3b3JkTWF0Y2gpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1Bhc3N3b3JkIG1pc21hdGNoJyk7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnSW52YWxpZCB1c2VybmFtZSBvciBwYXNzd29yZCcgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgZGIucXVlcnkoJ0lOU0VSVCBJTlRPIGFkbWluX3Nlc3Npb25zIChhZG1pbl9pZCwgbG9naW5fdGltZSkgVkFMVUVTICg/LCBOT1coKSknLCBbdXNlci5pZF0pO1xyXG5cclxuICAgIGNvbnN0IHRva2VuID0gc2lnbih7IHVzZXJJZDogdXNlci5pZCB9LCBwcm9jZXNzLmVudi5KV1RfU0VDUkVULCB7IGV4cGlyZXNJbjogJzZoJyB9KTtcclxuICAgIGNvbnNvbGUubG9nKCdMb2dpbiBzdWNjZXNzZnVsLCB0b2tlbiBnZW5lcmF0ZWQnKTtcclxuICAgIFxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAnU2lnbmluIHN1Y2Nlc3NmdWwnLCB1c2VybmFtZTogdXNlci51c2VybmFtZSwgdG9rZW46IHRva2VuIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTaWduIGluIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc2lnbmluJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVZhbGlkYXRlUGluKHJlcSwgcmVzKSB7XHJcbiAgY29uc3QgeyBwaW4gfSA9IHJlcS5ib2R5O1xyXG4gIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbj8uc3BsaXQoJyAnKVsxXTtcclxuXHJcbiAgaWYgKCF0b2tlbikge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdObyB0b2tlbiBwcm92aWRlZCcgfSk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgZGVjb2RlZCA9IHZlcmlmeSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCk7XHJcbiAgICBjb25zdCBbcmVzdWx0c10gPSBhd2FpdCBkYi5xdWVyeSgnU0VMRUNUIHBpbiBGUk9NIGFkbWluIFdIRVJFIGlkID0gPycsIFtkZWNvZGVkLnVzZXJJZF0pO1xyXG4gICAgXHJcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdBZG1pbiBub3QgZm91bmQnIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0b3JlZFBpbiA9IHJlc3VsdHNbMF0ucGluO1xyXG4gICAgXHJcbiAgICBpZiAoU3RyaW5nKHBpbikgPT09IFN0cmluZyhzdG9yZWRQaW4pKSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogJ1BJTiB2YWxpZGF0ZWQgc3VjY2Vzc2Z1bGx5JyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIFBJTicgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHZhbGlkYXRpbmcgUElOOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB2YWxpZGF0aW5nIFBJTicgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dvdXQocmVxLCByZXMpIHtcclxuICBjb25zdCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24/LnNwbGl0KCcgJylbMV07XHJcbiAgaWYgKHRva2VuKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkZWNvZGVkID0gdmVyaWZ5KHRva2VuLCBwcm9jZXNzLmVudi5KV1RfU0VDUkVUKTtcclxuICAgICAgYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgICAgIFVQREFURSBhZG1pbl9zZXNzaW9ucyBcclxuICAgICAgICBTRVQgbG9nb3V0X3RpbWUgPSBOT1coKSBcclxuICAgICAgICBXSEVSRSBhZG1pbl9pZCA9ID8gQU5EIGxvZ291dF90aW1lIElTIE5VTEwgXHJcbiAgICAgICAgT1JERVIgQlkgbG9naW5fdGltZSBERVNDIExJTUlUIDFcclxuICAgICAgYCwgW2RlY29kZWQudXNlcklkXSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgbG9nb3V0OicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmVzLnNldEhlYWRlcignU2V0LUNvb2tpZScsICd0b2tlbj07IFBhdGg9LzsgRXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVDsgSHR0cE9ubHknKTtcclxuICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdMb2dvdXQgc3VjY2Vzc2Z1bCcgfSk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldEFkbWluRGF0YShyZXEsIHJlcykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0c10gPSBhd2FpdCBkYi5xdWVyeSgnU0VMRUNUIGZ1bGxfbmFtZSwgdXNlcm5hbWUsIHBhc3N3b3JkLCBwaW4sIHJvbGUgRlJPTSBhZG1pbiBMSU1JVCAxJyk7XHJcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGFkbWluRGF0YSA9IHJlc3VsdHNbMF07XHJcbiAgICAgIGFkbWluRGF0YS5wYXNzd29yZCA9ICcqJy5yZXBlYXQoYWRtaW5EYXRhLnBhc3N3b3JkLmxlbmd0aCk7XHJcbiAgICAgIGFkbWluRGF0YS5waW4gPSAnKicucmVwZWF0KGFkbWluRGF0YS5waW4ubGVuZ3RoKTtcclxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oYWRtaW5EYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdBZG1pbiBub3QgZm91bmQnIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhZG1pbiBkYXRhOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBmZXRjaGluZyBhZG1pbiBkYXRhJyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZUFkbWluRGF0YShyZXEsIHJlcykge1xyXG4gIGNvbnN0IHsgZnVsbF9uYW1lLCB1c2VybmFtZSwgcGFzc3dvcmQsIHBpbiwgcm9sZSB9ID0gcmVxLmJvZHk7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGxldCBzcWwgPSAnVVBEQVRFIGFkbWluIFNFVCBmdWxsX25hbWUgPSA/LCB1c2VybmFtZSA9ID8sIHJvbGUgPSA/JztcclxuICAgIGxldCBwYXJhbXMgPSBbZnVsbF9uYW1lLCB1c2VybmFtZSwgcm9sZV07XHJcblxyXG4gICAgaWYgKHBhc3N3b3JkKSB7XHJcbiAgICAgIHNxbCArPSAnLCBwYXNzd29yZCA9ID8nO1xyXG4gICAgICBwYXJhbXMucHVzaChwYXNzd29yZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBpbikge1xyXG4gICAgICBzcWwgKz0gJywgcGluID0gPyc7XHJcbiAgICAgIHBhcmFtcy5wdXNoKHBpbik7XHJcbiAgICB9XHJcblxyXG4gICAgc3FsICs9ICcgV0hFUkUgaWQgPSAxJzsgXHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcXVlcnkoc3FsLCBwYXJhbXMpO1xyXG5cclxuICAgIGlmIChyZXN1bHQuYWZmZWN0ZWRSb3dzID09PSAwKSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdBZG1pbiBub3QgZm91bmQnIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBtZXNzYWdlOiAnQWRtaW4gZGF0YSB1cGRhdGVkIHN1Y2Nlc3NmdWxseScgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGFkbWluIGRhdGE6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHVwZGF0aW5nIGFkbWluIGRhdGEnIH0pO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlR2V0U2Vzc2lvbkhpc3RvcnkocmVxLCByZXMpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgZGIucXVlcnkoYFxyXG4gICAgICBTRUxFQ1QgXHJcbiAgICAgICAgcy5pZCwgXHJcbiAgICAgICAgYS5mdWxsX25hbWUsIFxyXG4gICAgICAgIGEudXNlcm5hbWUsIFxyXG4gICAgICAgIHMubG9naW5fdGltZSwgXHJcbiAgICAgICAgcy5sb2dvdXRfdGltZVxyXG4gICAgICBGUk9NIFxyXG4gICAgICAgIGFkbWluX3Nlc3Npb25zIHNcclxuICAgICAgSk9JTiBcclxuICAgICAgICBhZG1pbiBhIE9OIHMuYWRtaW5faWQgPSBhLmlkXHJcbiAgICAgIE9SREVSIEJZIFxyXG4gICAgICAgIHMubG9naW5fdGltZSBERVNDIFxyXG4gICAgICBMSU1JVCA1MFxyXG4gICAgYCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHRzKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc2Vzc2lvbiBoaXN0b3J5OicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBmZXRjaGluZyBzZXNzaW9uIGhpc3RvcnknIH0pO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyBQcm9kdWN0cyBBZGQtVXBkYXRlLURlbGV0ZSBpbiBwcm9kdWN0cyB0YWJsZVxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRQcm9kdWN0cyhyZXEsIHJlcykge1xyXG4gIGNvbnN0IHsgcGFnZSA9IDEsIGxpbWl0ID0gMTAsIGlkIH0gPSByZXEucXVlcnk7XHJcbiAgY29uc3Qgb2Zmc2V0ID0gKHBhZ2UgLSAxKSAqIGxpbWl0O1xyXG5cclxuICB0cnkge1xyXG4gICAgLy8gSWYgSUQgaXMgcHJvdmlkZWQsIGZldGNoIHNpbmdsZSBwcm9kdWN0IHdpdGggaXRzIGN1cnJlbnQgc3RvY2tcclxuICAgIGlmIChpZCkge1xyXG4gICAgICBjb25zdCBbcHJvZHVjdF0gPSBhd2FpdCBkYi5xdWVyeShcclxuICAgICAgICBgU0VMRUNUIHAuKiwgQ09BTEVTQ0UocHMucXVhbnRpdHksIDApIGFzIGN1cnJlbnRfc3RvY2sgXHJcbiAgICAgICAgIEZST00gcHJvZHVjdHMgcCBcclxuICAgICAgICAgTEVGVCBKT0lOIHByb2R1Y3Rfc3RvY2tzIHBzIE9OIHAuaWQgPSBwcy5wcm9kdWN0X2lkIFxyXG4gICAgICAgICBXSEVSRSBwLmlkID0gPyBBTkQgcC5kZWxldGVkID0gRkFMU0VgLFxyXG4gICAgICAgIFtwYXJzZUludChpZCldXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAocHJvZHVjdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1Byb2R1Y3Qgbm90IGZvdW5kJyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgICBwcm9kdWN0czogcHJvZHVjdCxcclxuICAgICAgICBjdXJyZW50UGFnZTogMSxcclxuICAgICAgICB0b3RhbFBhZ2VzOiAxLFxyXG4gICAgICAgIHRvdGFsSXRlbXM6IDFcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3RoZXJ3aXNlLCBoYW5kbGUgcGFnaW5hdGVkIGxpc3Qgd2l0aCBjdXJyZW50IHN0b2NrIHF1YW50aXRpZXNcclxuICAgIGNvbnN0IFtjb3VudFJlc3VsdF0gPSBhd2FpdCBkYi5xdWVyeShcclxuICAgICAgJ1NFTEVDVCBDT1VOVCgqKSBhcyB0b3RhbCBGUk9NIHByb2R1Y3RzIFdIRVJFIGRlbGV0ZWQgPSBGQUxTRSdcclxuICAgICk7XHJcbiAgICBjb25zdCB0b3RhbEl0ZW1zID0gY291bnRSZXN1bHRbMF0udG90YWw7XHJcbiAgICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsSXRlbXMgLyBsaW1pdCk7XHJcblxyXG4gICAgY29uc3QgW3Byb2R1Y3RzXSA9IGF3YWl0IGRiLnF1ZXJ5KFxyXG4gICAgICBgU0VMRUNUIHAuKiwgQ09BTEVTQ0UocHMucXVhbnRpdHksIDApIGFzIGN1cnJlbnRfc3RvY2sgXHJcbiAgICAgICBGUk9NIHByb2R1Y3RzIHAgXHJcbiAgICAgICBMRUZUIEpPSU4gcHJvZHVjdF9zdG9ja3MgcHMgT04gcC5pZCA9IHBzLnByb2R1Y3RfaWQgXHJcbiAgICAgICBXSEVSRSBwLmRlbGV0ZWQgPSBGQUxTRSBcclxuICAgICAgIExJTUlUID8gT0ZGU0VUID9gLFxyXG4gICAgICBbcGFyc2VJbnQobGltaXQpLCBvZmZzZXRdXHJcbiAgICApO1xyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgcHJvZHVjdHMsXHJcbiAgICAgIGN1cnJlbnRQYWdlOiBwYXJzZUludChwYWdlKSxcclxuICAgICAgdG90YWxQYWdlcyxcclxuICAgICAgdG90YWxJdGVtc1xyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHByb2R1Y3RzOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBmZXRjaGluZyBwcm9kdWN0cycgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRUb3RhbFN0b2NrKHJlcSwgcmVzKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgZGIucXVlcnkoXHJcbiAgICAgICdTRUxFQ1QgU1VNKHF1YW50aXR5KSBhcyB0b3RhbFN0b2NrIEZST00gcHJvZHVjdF9zdG9ja3MnXHJcbiAgICApO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyB0b3RhbFN0b2NrOiByZXN1bHRbMF0udG90YWxTdG9jayB8fCAwIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB0b3RhbCBzdG9jazonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgZmV0Y2hpbmcgdG90YWwgc3RvY2snIH0pO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWRkUHJvZHVjdChyZXEsIHJlcykge1xyXG4gIGNvbnN0IHsgbmFtZSwgZGVzY3JpcHRpb24sIHByaWNlLCBpbWFnZV91cmwsIGNhdGVnb3J5LCBzdXBwbGllcl9pZCB9ID0gcmVxLmJvZHk7XHJcbiAgY29uc3Qgc3FsID0gXCJJTlNFUlQgSU5UTyBwcm9kdWN0cyAobmFtZSwgZGVzY3JpcHRpb24sIHByaWNlLCBpbWFnZV91cmwsIGNhdGVnb3J5LCBzdXBwbGllcl9pZCkgVkFMVUVTICg/LCA/LCA/LCA/LCA/LCA/KVwiO1xyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KHNxbCwgW25hbWUsIGRlc2NyaXB0aW9uLCBwcmljZSwgaW1hZ2VfdXJsLCBjYXRlZ29yeSwgc3VwcGxpZXJfaWRdKTtcclxuICAgIFxyXG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24oeyBcclxuICAgICAgbWVzc2FnZTogJ1Byb2R1Y3QgYWRkZWQgc3VjY2Vzc2Z1bGx5JywgXHJcbiAgICAgIGlkOiByZXN1bHQuaW5zZXJ0SWQgXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIHByb2R1Y3Q6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIGFkZGluZyBwcm9kdWN0JyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZVByb2R1Y3QocmVxLCByZXMsIGlkKSB7XHJcbiAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiwgcHJpY2UsIGltYWdlX3VybCwgY2F0ZWdvcnksIHN1cHBsaWVyX2lkIH0gPSByZXEuYm9keTtcclxuICBjb25zdCBzcWwgPSBcIlVQREFURSBwcm9kdWN0cyBTRVQgbmFtZT0/LCBkZXNjcmlwdGlvbj0/LCBwcmljZT0/LCBpbWFnZV91cmw9PywgY2F0ZWdvcnk9Pywgc3VwcGxpZXJfaWQ9PyBXSEVSRSBpZD0/XCI7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgZGIucXVlcnkoc3FsLCBbbmFtZSwgZGVzY3JpcHRpb24sIHByaWNlLCBpbWFnZV91cmwsIGNhdGVnb3J5LCBzdXBwbGllcl9pZCwgaWRdKTtcclxuICAgIGlmIChyZXN1bHQuYWZmZWN0ZWRSb3dzID09PSAwKSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdQcm9kdWN0IG5vdCBmb3VuZCcgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdQcm9kdWN0IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgcHJvZHVjdDonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgdXBkYXRpbmcgcHJvZHVjdCcgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVEZWxldGVQcm9kdWN0KHJlcSwgcmVzLCBpZCkge1xyXG4gIGNvbnN0IHNxbCA9IFwiVVBEQVRFIHByb2R1Y3RzIFNFVCBkZWxldGVkID0gVFJVRSBXSEVSRSBpZCA9ID9cIjtcclxuICBcclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBkYi5xdWVyeShzcWwsIFtpZF0pO1xyXG4gICAgaWYgKHJlc3VsdC5hZmZlY3RlZFJvd3MgPT09IDApIHtcclxuICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1Byb2R1Y3Qgbm90IGZvdW5kJyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEFsc28gZGVsZXRlIGFzc29jaWF0ZWQgc3RvY2sgZW50cmllc1xyXG4gICAgICBhd2FpdCBkYi5xdWVyeShcIkRFTEVURSBGUk9NIHByb2R1Y3Rfc3RvY2tzIFdIRVJFIHByb2R1Y3RfaWQgPSA/XCIsIFtpZF0pO1xyXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdQcm9kdWN0IG1hcmtlZCBhcyBkZWxldGVkIHN1Y2Nlc3NmdWxseScgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG1hcmtpbmcgcHJvZHVjdCBhcyBkZWxldGVkOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBtYXJraW5nIHByb2R1Y3QgYXMgZGVsZXRlZCcgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBTdG9jayBNYW5hZ2VtZW50IEVuZHBvaW50c1xyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRTdG9ja3MocmVxLCByZXMpIHtcclxuICBjb25zdCBwYWdlID0gcGFyc2VJbnQocmVxLnF1ZXJ5LnBhZ2UpIHx8IDE7XHJcbiAgY29uc3QgbGltaXQgPSBwYXJzZUludChyZXEucXVlcnkubGltaXQpIHx8IDEwO1xyXG4gIGNvbnN0IG9mZnNldCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtzdG9ja3NdID0gYXdhaXQgZGIucXVlcnkoXHJcbiAgICAgIGBTRUxFQ1QgXHJcbiAgICAgICAgcHMuaWQsXHJcbiAgICAgICAgcHMucHJvZHVjdF9pZCxcclxuICAgICAgICBwLm5hbWUsXHJcbiAgICAgICAgcHMucXVhbnRpdHksXHJcbiAgICAgICAgcHMubGFzdF91cGRhdGVkXHJcbiAgICAgIEZST00gcHJvZHVjdF9zdG9ja3MgcHNcclxuICAgICAgSk9JTiBwcm9kdWN0cyBwIE9OIHBzLnByb2R1Y3RfaWQgPSBwLmlkXHJcbiAgICAgIFdIRVJFIHAuZGVsZXRlZCA9IEZBTFNFXHJcbiAgICAgIE9SREVSIEJZIHBzLmxhc3RfdXBkYXRlZCBERVNDXHJcbiAgICAgIExJTUlUID8gT0ZGU0VUID9gLFxyXG4gICAgICBbbGltaXQsIG9mZnNldF1cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgW2NvdW50UmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KFxyXG4gICAgICAnU0VMRUNUIENPVU5UKCopIGFzIHRvdGFsIEZST00gcHJvZHVjdF9zdG9ja3MgcHMgSk9JTiBwcm9kdWN0cyBwIE9OIHBzLnByb2R1Y3RfaWQgPSBwLmlkIFdIRVJFIHAuZGVsZXRlZCA9IEZBTFNFJ1xyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCB0b3RhbEl0ZW1zID0gY291bnRSZXN1bHRbMF0udG90YWw7XHJcbiAgICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsSXRlbXMgLyBsaW1pdCk7XHJcblxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICBzdG9ja3MsXHJcbiAgICAgIHRvdGFsUGFnZXMsXHJcbiAgICAgIHRvdGFsSXRlbXMsXHJcbiAgICAgIGN1cnJlbnRQYWdlOiBwYWdlXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc3RvY2tzOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBmZXRjaGluZyBzdG9ja3MnIH0pO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWRkU3RvY2socmVxLCByZXMpIHtcclxuICBjb25zdCB7IGlkLCBwcm9kdWN0X2lkLCBxdWFudGl0eSB9ID0gcmVxLmJvZHk7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIC8vIEZpcnN0IGNoZWNrIGlmIHN0b2NrIGVudHJ5IGFscmVhZHkgZXhpc3RzXHJcbiAgICBjb25zdCBbZXhpc3RpbmdTdG9ja10gPSBhd2FpdCBkYi5xdWVyeShcclxuICAgICAgJ1NFTEVDVCAqIEZST00gcHJvZHVjdF9zdG9ja3MgV0hFUkUgaWQgPSA/IE9SIHByb2R1Y3RfaWQgPSA/JyxcclxuICAgICAgW2lkLCBwcm9kdWN0X2lkXVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoZXhpc3RpbmdTdG9jay5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIFN0b2NrIGV4aXN0cywgdXBkYXRlIHRoZSBxdWFudGl0eSBpbnN0ZWFkXHJcbiAgICAgIGNvbnN0IG5ld1F1YW50aXR5ID0gZXhpc3RpbmdTdG9ja1swXS5xdWFudGl0eSArIHBhcnNlSW50KHF1YW50aXR5KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHVwZGF0ZVNxbCA9IGBcclxuICAgICAgICBVUERBVEUgcHJvZHVjdF9zdG9ja3MgXHJcbiAgICAgICAgU0VUIHF1YW50aXR5ID0gPywgXHJcbiAgICAgICAgICAgIGxhc3RfdXBkYXRlZCA9IE5PVygpXHJcbiAgICAgICAgV0hFUkUgaWQgPSA/XHJcbiAgICAgIGA7XHJcbiAgICAgIFxyXG4gICAgICBhd2FpdCBkYi5xdWVyeSh1cGRhdGVTcWwsIFtuZXdRdWFudGl0eSwgZXhpc3RpbmdTdG9ja1swXS5pZF0pO1xyXG5cclxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBcclxuICAgICAgICBtZXNzYWdlOiAnU3RvY2sgcXVhbnRpdHkgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxyXG4gICAgICAgIGlkOiBleGlzdGluZ1N0b2NrWzBdLmlkLFxyXG4gICAgICAgIG5ld1F1YW50aXR5XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU3RvY2sgZG9lc24ndCBleGlzdCwgY3JlYXRlIG5ldyBlbnRyeVxyXG4gICAgICBjb25zdCBpbnNlcnRTcWwgPSBgXHJcbiAgICAgICAgSU5TRVJUIElOVE8gcHJvZHVjdF9zdG9ja3MgXHJcbiAgICAgICAgKGlkLCBwcm9kdWN0X2lkLCBxdWFudGl0eSwgbGFzdF91cGRhdGVkKSBcclxuICAgICAgICBWQUxVRVMgKD8sID8sID8sIE5PVygpKVxyXG4gICAgICBgO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBkYi5xdWVyeShpbnNlcnRTcWwsIFtpZCwgcHJvZHVjdF9pZCwgcXVhbnRpdHldKTtcclxuXHJcbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgXHJcbiAgICAgICAgbWVzc2FnZTogJ1N0b2NrIGFkZGVkIHN1Y2Nlc3NmdWxseScsIFxyXG4gICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0SWQgXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBtYW5hZ2luZyBzdG9jazonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgbWFuYWdpbmcgc3RvY2snIH0pO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlVXBkYXRlU3RvY2socmVxLCByZXMsIGlkKSB7XHJcbiAgY29uc3QgeyBxdWFudGl0eSB9ID0gcmVxLmJvZHk7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIC8vIEZpcnN0LCBnZXQgdGhlIGN1cnJlbnQgc3RvY2tcclxuICAgIGNvbnN0IFtleGlzdGluZ1N0b2NrXSA9IGF3YWl0IGRiLnF1ZXJ5KFxyXG4gICAgICAnU0VMRUNUICogRlJPTSBwcm9kdWN0X3N0b2NrcyBXSEVSRSBpZCA9ID8nLFxyXG4gICAgICBbaWRdXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChleGlzdGluZ1N0b2NrLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1N0b2NrIGVudHJ5IG5vdCBmb3VuZCcgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBzdG9jayBxdWFudGl0eVxyXG4gICAgY29uc3Qgc3FsID0gYFxyXG4gICAgICBVUERBVEUgcHJvZHVjdF9zdG9ja3MgXHJcbiAgICAgIFNFVCBxdWFudGl0eSA9ID8sXHJcbiAgICAgICAgICBsYXN0X3VwZGF0ZWQgPSBOT1coKVxyXG4gICAgICBXSEVSRSBpZCA9ID9cclxuICAgIGA7XHJcbiAgICBcclxuICAgIGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgZGIucXVlcnkoc3FsLCBbcXVhbnRpdHksIGlkXSk7XHJcblxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBcclxuICAgICAgbWVzc2FnZTogJ1N0b2NrIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyxcclxuICAgICAgdXBkYXRlZFN0b2NrOiB7XHJcbiAgICAgICAgaWQsXHJcbiAgICAgICAgcXVhbnRpdHksXHJcbiAgICAgICAgbGFzdF91cGRhdGVkOiBuZXcgRGF0ZSgpXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBzdG9jazonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgdXBkYXRpbmcgc3RvY2snIH0pO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlRGVsZXRlU3RvY2socmVxLCByZXMsIGlkKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtzdG9ja10gPSBhd2FpdCBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBwcm9kdWN0X3N0b2NrcyBXSEVSRSBpZCA9ID8nLCBbaWRdKTtcclxuICAgIFxyXG4gICAgaWYgKHN0b2NrLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1N0b2NrIG5vdCBmb3VuZCcgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVsZXRlIHRoZSBzdG9jayByZWNvcmRcclxuICAgIGF3YWl0IGRiLnF1ZXJ5KCdERUxFVEUgRlJPTSBwcm9kdWN0X3N0b2NrcyBXSEVSRSBpZCA9ID8nLCBbaWRdKTtcclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdTdG9jayBkZWxldGVkIHN1Y2Nlc3NmdWxseScgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIHN0b2NrOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBkZWxldGluZyBzdG9jaycgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vT3JkZXIgTW9uaXRvcmluZ1xyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZXRTYWxlc1JlcG9ydChyZXEsIHJlcykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KGBcclxuICAgICAgU0VMRUNUIFxyXG4gICAgICAgIG8uKixcclxuICAgICAgICBHUk9VUF9DT05DQVQoQ09OQ0FUKG9wLm5hbWUsICcgKCcsIG9wLnF1YW50aXR5LCAnKScpIFNFUEFSQVRPUiAnLCAnKSBBUyBvcmRlcmVkX3Byb2R1Y3RzXHJcbiAgICAgIEZST00gb3JkZXJzIG9cclxuICAgICAgTEVGVCBKT0lOIG9yZGVyZWRfcHJvZHVjdHMgb3AgT04gby5pZCA9IG9wLm9yZGVyX2lkXHJcbiAgICAgIFdIRVJFIG8uaW5fc2FsZXNfcmVwb3J0ID0gMVxyXG4gICAgICBHUk9VUCBCWSBvLmlkXHJcbiAgICAgIE9SREVSIEJZIG8ub3JkZXJfZGF0ZSBERVNDXHJcbiAgICBgKTtcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3VsdCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHNhbGVzIHJlcG9ydDonLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZmV0Y2hpbmcgc2FsZXMgcmVwb3J0IGRhdGEnIH0pO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlVXBkYXRlT3JkZXJTdGF0dXMocmVxLCByZXMsIGlkKSB7XHJcbiAgY29uc3QgeyBzdGF0dXMgfSA9IHJlcS5ib2R5O1xyXG4gIGNvbnNvbGUubG9nKCdVcGRhdGluZyBvcmRlciBzdGF0dXM6JywgaWQsIHN0YXR1cyk7XHJcblxyXG4gIGNvbnN0IHNxbCA9IFwiVVBEQVRFIG9yZGVycyBTRVQgc3RhdHVzID0gPyBXSEVSRSBpZCA9ID9cIjtcclxuICB0cnkge1xyXG4gICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBkYi5xdWVyeShzcWwsIFtzdGF0dXMsIGlkXSk7XHJcbiAgICBpZiAocmVzdWx0LmFmZmVjdGVkUm93cyA9PT0gMCkge1xyXG4gICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnT3JkZXIgbm90IGZvdW5kJyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogJ09yZGVyIHN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsIHN0YXR1czogc3RhdHVzIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBvcmRlciBzdGF0dXM6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIHVwZGF0aW5nIG9yZGVyIHN0YXR1cycgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYW5jZWxPcmRlcihyZXEsIHJlcywgaWQpIHtcclxuICBjb25zdCBzcWwgPSBcIlVQREFURSBvcmRlcnMgU0VUIHN0YXR1cyA9ICdDYW5jZWxsZWQnIFdIRVJFIGlkID0gP1wiO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KHNxbCwgW2lkXSk7XHJcbiAgICBpZiAocmVzdWx0LmFmZmVjdGVkUm93cyA9PT0gMCkge1xyXG4gICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnT3JkZXIgbm90IGZvdW5kJyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogJ09yZGVyIGNhbmNlbGxlZCBzdWNjZXNzZnVsbHknIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYW5jZWxsaW5nIG9yZGVyOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBjYW5jZWxsaW5nIG9yZGVyJyB9KTtcclxuICB9XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlVXBkYXRlT3JkZXIocmVxLCByZXMsIGlkKSB7XHJcbiAgY29uc3QgeyBvcmRlcl9kYXRlIH0gPSByZXEuYm9keTtcclxuICBjb25zdCBzcWwgPSBcIlVQREFURSBvcmRlcnMgU0VUIG9yZGVyX2RhdGUgPSA/IFdIRVJFIGlkID0gP1wiO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KHNxbCwgW29yZGVyX2RhdGUsIGlkXSk7XHJcbiAgICBpZiAocmVzdWx0LmFmZmVjdGVkUm93cyA9PT0gMCkge1xyXG4gICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnT3JkZXIgbm90IGZvdW5kJyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogJ09yZGVyIGRhdGUgdXBkYXRlZCBzdWNjZXNzZnVsbHknIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBvcmRlciBkYXRlOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciB1cGRhdGluZyBvcmRlciBkYXRlJyB9KTtcclxuICB9XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlT3JkZXJGcm9tU2FsZXNSZXBvcnQocmVxLCByZXMpIHtcclxuICBjb25zdCB7IGlkIH0gPSByZXEucXVlcnk7XHJcbiAgY29uc3Qgc3FsID0gXCJVUERBVEUgb3JkZXJzIFNFVCBpbl9zYWxlc19yZXBvcnQgPSAwIFdIRVJFIGlkID0gP1wiO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KHNxbCwgW2lkXSk7XHJcbiAgICBpZiAocmVzdWx0LmFmZmVjdGVkUm93cyA9PT0gMCkge1xyXG4gICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnT3JkZXIgbm90IGZvdW5kJyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogJ09yZGVyIHJlbW92ZWQgZnJvbSBzYWxlcyByZXBvcnQgc3VjY2Vzc2Z1bGx5JyB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3Zpbmcgb3JkZXIgZnJvbSBzYWxlcyByZXBvcnQ6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIHJlbW92aW5nIG9yZGVyIGZyb20gc2FsZXMgcmVwb3J0JyB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUdldE9yZGVycyhyZXEsIHJlcykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGRiLnF1ZXJ5KGBcclxuICAgICAgU0VMRUNUIG8uKiwgXHJcbiAgICAgICAgICAgICBHUk9VUF9DT05DQVQoXHJcbiAgICAgICAgICAgICAgIENPTkNBVChcclxuICAgICAgICAgICAgICAgICBvcC5uYW1lLCBcclxuICAgICAgICAgICAgICAgICAnICgnLCBvcC5xdWFudGl0eSwgJyknLFxyXG4gICAgICAgICAgICAgICAgICcgWycsIElGTlVMTChwLmltYWdlX3VybCwgJycpLCAnXSdcclxuICAgICAgICAgICAgICAgKSBcclxuICAgICAgICAgICAgICAgU0VQQVJBVE9SICcsICdcclxuICAgICAgICAgICAgICkgQVMgb3JkZXJlZF9wcm9kdWN0c1xyXG4gICAgICBGUk9NIG9yZGVycyBvXHJcbiAgICAgIExFRlQgSk9JTiBvcmRlcmVkX3Byb2R1Y3RzIG9wIE9OIG8uaWQgPSBvcC5vcmRlcl9pZFxyXG4gICAgICBMRUZUIEpPSU4gcHJvZHVjdHMgcCBPTiBvcC5wcm9kdWN0X2lkID0gcC5pZFxyXG4gICAgICBXSEVSRSBvLmluX3NhbGVzX3JlcG9ydCA9IDFcclxuICAgICAgR1JPVVAgQlkgby5pZFxyXG4gICAgYCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHQpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBvcmRlcnM6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIGZldGNoaW5nIG9yZGVycycgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBoYW5kbGVVcGRhdGVBZG1pbkRhdGEgfTsiXSwibmFtZXMiOlsibXlzcWwiLCJwYXJzZSIsInNpZ24iLCJ2ZXJpZnkiLCJxdWVyeSIsImRiIiwiY3JlYXRlUG9vbCIsImhvc3QiLCJwcm9jZXNzIiwiZW52IiwiTVlTUUxfSE9TVCIsInBvcnQiLCJNWVNRTF9QT1JUIiwidXNlciIsIk1ZU1FMX1VTRVIiLCJwYXNzd29yZCIsIk1ZU1FMX1BBU1NXT1JEIiwiZGF0YWJhc2UiLCJNWVNRTF9EQVRBQkFTRSIsIndhaXRGb3JDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25MaW1pdCIsInF1ZXVlTGltaXQiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwicGF0aG5hbWUiLCJ1cmwiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJyZXN1bHRzIiwibGVuZ3RoIiwiZnVsbE5hbWUiLCJmdWxsX25hbWUiLCJlcnJvciIsImF1dGhIZWFkZXIiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImlzQXV0aGVudGljYXRlZCIsInVzZXJuYW1lUGFzc3dvcmRWZXJpZmllZCIsInRva2VuIiwic3BsaXQiLCJkZWNvZGVkIiwiSldUX1NFQ1JFVCIsIm5vdyIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJleHAiLCJleHBpcmVzSW4iLCJoYW5kbGVHZXRQcm9kdWN0cyIsImhhbmRsZUdldFN0b2NrcyIsImhhbmRsZUdldFRvdGFsU3RvY2siLCJoYW5kbGVHZXRTYWxlc1JlcG9ydCIsImhhbmRsZUdldFNhbGVzRGF0YSIsImhhbmRsZUdldFRvdGFsUHJvZHVjdHMiLCJoYW5kbGVHZXRUb3BQcm9kdWN0cyIsImhhbmRsZUdldFJhdGVkUHJvZHVjdHNDb3VudCIsImhhbmRsZUxvZ291dCIsImhhbmRsZUdldE9yZGVycyIsImhhbmRsZUdldEFkbWluRGF0YSIsImhhbmRsZUdldFNlc3Npb25IaXN0b3J5IiwiaGFuZGxlR2V0UHJvZHVjdEFuYWx5dGljcyIsImhhbmRsZUdldFByb2R1Y3RQZXJmb3JtYW5jZSIsImhhbmRsZUdldERhaWx5U2FsZXMiLCJoYW5kbGVHZXRXZWVrbHlTYWxlcyIsImhhbmRsZUdldE1vbnRobHlTYWxlcyIsImhhbmRsZUdldFllYXJseVNhbGVzIiwiaGFuZGxlR2V0T3JkZXJEZXRhaWxzIiwiaGFuZGxlU2lnbkluIiwiaGFuZGxlVmFsaWRhdGVQaW4iLCJoYW5kbGVBZGRQcm9kdWN0IiwiaGFuZGxlQWRkU3RvY2siLCJzdGFydHNXaXRoIiwiaWQiLCJwb3AiLCJoYW5kbGVVcGRhdGVQcm9kdWN0IiwiaGFuZGxlVXBkYXRlU3RvY2siLCJwYXJ0cyIsImhhbmRsZVVwZGF0ZU9yZGVyU3RhdHVzIiwiaGFuZGxlQ2FuY2VsT3JkZXIiLCJoYW5kbGVVcGRhdGVPcmRlciIsImhhbmRsZVVwZGF0ZUFkbWluRGF0YSIsImhhbmRsZURlbGV0ZVByb2R1Y3QiLCJoYW5kbGVEZWxldGVTdG9jayIsImVuZHNXaXRoIiwiaGFuZGxlUmVtb3ZlT3JkZXJGcm9tU2FsZXNSZXBvcnQiLCJzZXRIZWFkZXIiLCJlbmQiLCJkYXRlIiwiZGF0ZUNvbmRpdGlvbiIsInF1ZXJ5RGF0ZSIsInRvSVNPU3RyaW5nIiwieWVhciIsImN1cnJlbnRZZWFyIiwiZ2V0RnVsbFllYXIiLCJmb3JtYXR0ZWRSZXN1bHRzIiwibWFwIiwicm93IiwibW9udGgiLCJvcmRlckNvdW50IiwiTnVtYmVyIiwidG90YWwiLCJjYW5jZWxsZWRDb3VudCIsImNhbmNlbGxlZFRvdGFsIiwiZGF5c09mV2VlayIsImZ1bGxXZWVrRGF0YSIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwicGVyaW9kIiwib3JkZXJzIiwiY2FuY2VsbGVkT3JkZXJzIiwiZm9yRWFjaCIsImRheUluZGV4Iiwid2Vla051bWJlciIsIndlZWtTdGFydCIsInRvTG9jYWxlRGF0ZVN0cmluZyIsIndlZWtFbmQiLCJ5ZWFybHlEYXRhIiwiaW5kZXgiLCJ0b1N0cmluZyIsInllYXJJbmRleCIsInNhbGVzUmVzdWx0Iiwib3JkZXJzUmVzdWx0IiwiY3VzdG9tZXJzUmVzdWx0IiwicmVzdWx0IiwicGVyaW9kU2FsZXMiLCJ0b3RhbE9yZGVycyIsInRvdGFsQ3VzdG9tZXJzIiwiZm9ybWF0dGVkUmVzdWx0IiwicHJvZHVjdCIsImF2Z19yYXRpbmciLCJ0b0ZpeGVkIiwidGltZUZyYW1lIiwicHJvZHVjdHMiLCJhbmFseXplZFByb2R1Y3RzIiwiaXNTYWxlYWJsZSIsIm9yZGVyX2NvdW50IiwiY3VycmVudF9zdG9jayIsInNhbGVhYmxlUHJvZHVjdHMiLCJmaWx0ZXIiLCJwIiwibm9uU2FsZWFibGVQcm9kdWN0cyIsInRvdGFsUHJvZHVjdHMiLCJzYWxlYWJsZUNvdW50Iiwibm9uU2FsZWFibGVDb3VudCIsInBlcmZvcm1hbmNlRGF0YSIsInRvdGFsX3VuaXRzX3NvbGQiLCJwZXJmb3JtYW5jZSIsInNsaWNlIiwidXNlcm5hbWUiLCJib2R5IiwicGFzc3dvcmRNYXRjaCIsInVzZXJJZCIsInN1Y2Nlc3MiLCJwaW4iLCJzdG9yZWRQaW4iLCJTdHJpbmciLCJhZG1pbkRhdGEiLCJyZXBlYXQiLCJyb2xlIiwic3FsIiwicGFyYW1zIiwicHVzaCIsImFmZmVjdGVkUm93cyIsInBhZ2UiLCJsaW1pdCIsIm9mZnNldCIsInBhcnNlSW50IiwiY3VycmVudFBhZ2UiLCJ0b3RhbFBhZ2VzIiwidG90YWxJdGVtcyIsImNvdW50UmVzdWx0IiwiY2VpbCIsInRvdGFsU3RvY2siLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJwcmljZSIsImltYWdlX3VybCIsImNhdGVnb3J5Iiwic3VwcGxpZXJfaWQiLCJpbnNlcnRJZCIsInN0b2NrcyIsInByb2R1Y3RfaWQiLCJxdWFudGl0eSIsImV4aXN0aW5nU3RvY2siLCJuZXdRdWFudGl0eSIsInVwZGF0ZVNxbCIsImluc2VydFNxbCIsInVwZGF0ZWRTdG9jayIsImxhc3RfdXBkYXRlZCIsInN0b2NrIiwib3JkZXJfZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/[...nextapi].js\n");

/***/ }),

/***/ "(api)/./src/utils/db.js":
/*!*************************!*\
  !*** ./src/utils/db.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"mysql2/promise\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mysql2_promise__WEBPACK_IMPORTED_MODULE_0__);\n\nconst pool = mysql2_promise__WEBPACK_IMPORTED_MODULE_0___default().createPool({\n    host: process.env.MYSQL_HOST,\n    port: parseInt(process.env.MYSQL_PORT),\n    database: process.env.MYSQL_DATABASE,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    connectionLimit: 10,\n    waitForConnections: true,\n    queueLimit: 0\n});\nasync function query(sql, values) {\n    try {\n        const [results] = await pool.query(sql, values);\n        return results;\n    } catch (error) {\n        console.error(\"Database query error:\", error);\n        throw error;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pool);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvdXRpbHMvZGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUVuQyxNQUFNQyxPQUFPRCxnRUFBZ0IsQ0FBQztJQUM1QkcsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVO0lBQzVCQyxNQUFNQyxTQUFTSixRQUFRQyxHQUFHLENBQUNJLFVBQVU7SUFDckNDLFVBQVVOLFFBQVFDLEdBQUcsQ0FBQ00sY0FBYztJQUNwQ0MsTUFBTVIsUUFBUUMsR0FBRyxDQUFDUSxVQUFVO0lBQzVCQyxVQUFVVixRQUFRQyxHQUFHLENBQUNVLGNBQWM7SUFDcENDLGlCQUFpQjtJQUNqQkMsb0JBQW9CO0lBQ3BCQyxZQUFZO0FBQ2Q7QUFFTyxlQUFlQyxNQUFNQyxHQUFHLEVBQUVDLE1BQU07SUFDckMsSUFBSTtRQUNGLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHLE1BQU1yQixLQUFLa0IsS0FBSyxDQUFDQyxLQUFLQztRQUN4QyxPQUFPQztJQUNULEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMseUJBQXlCQTtRQUN2QyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSxpRUFBZXRCLElBQUlBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZG1pbnBhbmVsLy4vc3JjL3V0aWxzL2RiLmpzP2QzODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG15c3FsIGZyb20gJ215c3FsMi9wcm9taXNlJztcclxuXHJcbmNvbnN0IHBvb2wgPSBteXNxbC5jcmVhdGVQb29sKHtcclxuICBob3N0OiBwcm9jZXNzLmVudi5NWVNRTF9IT1NULFxyXG4gIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52Lk1ZU1FMX1BPUlQpLFxyXG4gIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5NWVNRTF9EQVRBQkFTRSxcclxuICB1c2VyOiBwcm9jZXNzLmVudi5NWVNRTF9VU0VSLFxyXG4gIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5NWVNRTF9QQVNTV09SRCxcclxuICBjb25uZWN0aW9uTGltaXQ6IDEwLFxyXG4gIHdhaXRGb3JDb25uZWN0aW9uczogdHJ1ZSxcclxuICBxdWV1ZUxpbWl0OiAwXHJcbn0pO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHNxbCwgdmFsdWVzKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IFtyZXN1bHRzXSA9IGF3YWl0IHBvb2wucXVlcnkoc3FsLCB2YWx1ZXMpO1xyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGVycm9yOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcG9vbDsiXSwibmFtZXMiOlsibXlzcWwiLCJwb29sIiwiY3JlYXRlUG9vbCIsImhvc3QiLCJwcm9jZXNzIiwiZW52IiwiTVlTUUxfSE9TVCIsInBvcnQiLCJwYXJzZUludCIsIk1ZU1FMX1BPUlQiLCJkYXRhYmFzZSIsIk1ZU1FMX0RBVEFCQVNFIiwidXNlciIsIk1ZU1FMX1VTRVIiLCJwYXNzd29yZCIsIk1ZU1FMX1BBU1NXT1JEIiwiY29ubmVjdGlvbkxpbWl0Iiwid2FpdEZvckNvbm5lY3Rpb25zIiwicXVldWVMaW1pdCIsInF1ZXJ5Iiwic3FsIiwidmFsdWVzIiwicmVzdWx0cyIsImVycm9yIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/utils/db.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2F%5B...nextapi%5D&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5C%5B...nextapi%5D.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();